
DistanceSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c5c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000211c  08003d6c  08003d6c  00004d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e88  08005e88  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005e88  08005e88  0000706c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005e88  08005e88  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e88  08005e88  00006e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e8c  08005e8c  00006e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005e90  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  2000006c  08005efc  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  08005efc  0000769c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b53f  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c90  00000000  00000000  000125d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00014268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a42  00000000  00000000  00014f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f5b  00000000  00000000  000159c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f631  00000000  00000000  0002d91d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad35  00000000  00000000  0003cf4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7c83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d84  00000000  00000000  000c7cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000cba4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003d54 	.word	0x08003d54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08003d54 	.word	0x08003d54

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr
 800092c:	0000      	movs	r0, r0
	...

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b598      	push	{r3, r4, r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f000 fdb6 	bl	80014a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f8bc 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 f97e 	bl	8000c3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000940:	f000 f8fe 	bl	8000b40 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000944:	f000 f92a 	bl	8000b9c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000948:	484f      	ldr	r0, [pc, #316]	@ (8000a88 <main+0x158>)
 800094a:	f002 fadf 	bl	8002f0c <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000954:	484d      	ldr	r0, [pc, #308]	@ (8000a8c <main+0x15c>)
 8000956:	f001 f8aa 	bl	8001aae <HAL_GPIO_WritePin>
  SSD1306_Init();
 800095a:	f000 f9cd 	bl	8000cf8 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000964:	4849      	ldr	r0, [pc, #292]	@ (8000a8c <main+0x15c>)
 8000966:	f001 f8a2 	bl	8001aae <HAL_GPIO_WritePin>
	      __HAL_TIM_SET_COUNTER(&htim1, 0);
 800096a:	4b47      	ldr	r3, [pc, #284]	@ (8000a88 <main+0x158>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
	      while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000972:	bf00      	nop
 8000974:	4b44      	ldr	r3, [pc, #272]	@ (8000a88 <main+0x158>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800097a:	2b09      	cmp	r3, #9
 800097c:	d9fa      	bls.n	8000974 <main+0x44>
	      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000984:	4841      	ldr	r0, [pc, #260]	@ (8000a8c <main+0x15c>)
 8000986:	f001 f892 	bl	8001aae <HAL_GPIO_WritePin>

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 800098a:	f000 fde3 	bl	8001554 <HAL_GetTick>
 800098e:	4603      	mov	r3, r0
 8000990:	4a3f      	ldr	r2, [pc, #252]	@ (8000a90 <main+0x160>)
 8000992:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go high
	      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000994:	bf00      	nop
 8000996:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800099a:	483c      	ldr	r0, [pc, #240]	@ (8000a8c <main+0x15c>)
 800099c:	f001 f870 	bl	8001a80 <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d108      	bne.n	80009b8 <main+0x88>
 80009a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000a90 <main+0x160>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f103 040a 	add.w	r4, r3, #10
 80009ae:	f000 fdd1 	bl	8001554 <HAL_GetTick>
 80009b2:	4603      	mov	r3, r0
 80009b4:	429c      	cmp	r4, r3
 80009b6:	d8ee      	bhi.n	8000996 <main+0x66>
	      Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 80009b8:	4b33      	ldr	r3, [pc, #204]	@ (8000a88 <main+0x158>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009be:	4a35      	ldr	r2, [pc, #212]	@ (8000a94 <main+0x164>)
 80009c0:	6013      	str	r3, [r2, #0]

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80009c2:	f000 fdc7 	bl	8001554 <HAL_GetTick>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a31      	ldr	r2, [pc, #196]	@ (8000a90 <main+0x160>)
 80009ca:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go low
	      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 80009cc:	bf00      	nop
 80009ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009d2:	482e      	ldr	r0, [pc, #184]	@ (8000a8c <main+0x15c>)
 80009d4:	f001 f854 	bl	8001a80 <HAL_GPIO_ReadPin>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d008      	beq.n	80009f0 <main+0xc0>
 80009de:	4b2c      	ldr	r3, [pc, #176]	@ (8000a90 <main+0x160>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 80009e6:	f000 fdb5 	bl	8001554 <HAL_GetTick>
 80009ea:	4603      	mov	r3, r0
 80009ec:	429c      	cmp	r4, r3
 80009ee:	d8ee      	bhi.n	80009ce <main+0x9e>
	      Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 80009f0:	4b25      	ldr	r3, [pc, #148]	@ (8000a88 <main+0x158>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f6:	4a28      	ldr	r2, [pc, #160]	@ (8000a98 <main+0x168>)
 80009f8:	6013      	str	r3, [r2, #0]

	      Distance = (Value2-Value1)* 0.034/2;
 80009fa:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <main+0x168>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <main+0x164>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fce5 	bl	80003d4 <__aeabi_ui2d>
 8000a0a:	a31d      	add	r3, pc, #116	@ (adr r3, 8000a80 <main+0x150>)
 8000a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a10:	f7ff fd5a 	bl	80004c8 <__aeabi_dmul>
 8000a14:	4602      	mov	r2, r0
 8000a16:	460b      	mov	r3, r1
 8000a18:	4610      	mov	r0, r2
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a24:	f7ff fe7a 	bl	800071c <__aeabi_ddiv>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f7ff ff5c 	bl	80008ec <__aeabi_d2uiz>
 8000a34:	4603      	mov	r3, r0
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <main+0x16c>)
 8000a3a:	801a      	strh	r2, [r3, #0]

	      SSD1306_GotoXY (0, 0);
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 fac2 	bl	8000fc8 <SSD1306_GotoXY>
	      SSD1306_Puts ("Distance:", &Font_11x18, 1);
 8000a44:	2201      	movs	r2, #1
 8000a46:	4916      	ldr	r1, [pc, #88]	@ (8000aa0 <main+0x170>)
 8000a48:	4816      	ldr	r0, [pc, #88]	@ (8000aa4 <main+0x174>)
 8000a4a:	f000 fb51 	bl	80010f0 <SSD1306_Puts>
	      sprintf(strCopy,"%d    ", Distance);
 8000a4e:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <main+0x16c>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	4914      	ldr	r1, [pc, #80]	@ (8000aa8 <main+0x178>)
 8000a56:	4815      	ldr	r0, [pc, #84]	@ (8000aac <main+0x17c>)
 8000a58:	f002 fccc 	bl	80033f4 <siprintf>
	      SSD1306_GotoXY (0, 30);
 8000a5c:	211e      	movs	r1, #30
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f000 fab2 	bl	8000fc8 <SSD1306_GotoXY>
	      SSD1306_Puts (strCopy, &Font_16x26, 1);
 8000a64:	2201      	movs	r2, #1
 8000a66:	4912      	ldr	r1, [pc, #72]	@ (8000ab0 <main+0x180>)
 8000a68:	4810      	ldr	r0, [pc, #64]	@ (8000aac <main+0x17c>)
 8000a6a:	f000 fb41 	bl	80010f0 <SSD1306_Puts>
	      SSD1306_UpdateScreen();
 8000a6e:	f000 fa07 	bl	8000e80 <SSD1306_UpdateScreen>
	      HAL_Delay(50);
 8000a72:	2032      	movs	r0, #50	@ 0x32
 8000a74:	f000 fd78 	bl	8001568 <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000a78:	e771      	b.n	800095e <main+0x2e>
 8000a7a:	bf00      	nop
 8000a7c:	f3af 8000 	nop.w
 8000a80:	b020c49c 	.word	0xb020c49c
 8000a84:	3fa16872 	.word	0x3fa16872
 8000a88:	200000dc 	.word	0x200000dc
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	20000124 	.word	0x20000124
 8000a94:	20000128 	.word	0x20000128
 8000a98:	2000012c 	.word	0x2000012c
 8000a9c:	20000130 	.word	0x20000130
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	08003d6c 	.word	0x08003d6c
 8000aa8:	08003d78 	.word	0x08003d78
 8000aac:	20000134 	.word	0x20000134
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b090      	sub	sp, #64	@ 0x40
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0318 	add.w	r3, r7, #24
 8000abe:	2228      	movs	r2, #40	@ 0x28
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fcb8 	bl	8003438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ada:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ade:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000af2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 0318 	add.w	r3, r7, #24
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fdb9 	bl	8002674 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b08:	f000 f8f0 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b10:	2302      	movs	r3, #2
 8000b12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 f826 	bl	8002b78 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b32:	f000 f8db 	bl	8000cec <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3740      	adds	r7, #64	@ 0x40
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b46:	4a13      	ldr	r2, [pc, #76]	@ (8000b94 <MX_I2C1_Init+0x54>)
 8000b48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b4c:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <MX_I2C1_Init+0x58>)
 8000b4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b7e:	f000 ffaf 	bl	8001ae0 <HAL_I2C_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b88:	f000 f8b0 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000088 	.word	0x20000088
 8000b94:	40005400 	.word	0x40005400
 8000b98:	00061a80 	.word	0x00061a80

08000b9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <MX_TIM1_Init+0x98>)
 8000bba:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <MX_TIM1_Init+0x9c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <MX_TIM1_Init+0x98>)
 8000bc0:	2247      	movs	r2, #71	@ 0x47
 8000bc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MX_TIM1_Init+0x98>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_TIM1_Init+0x98>)
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_TIM1_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_TIM1_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MX_TIM1_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000be4:	4813      	ldr	r0, [pc, #76]	@ (8000c34 <MX_TIM1_Init+0x98>)
 8000be6:	f002 f941 	bl	8002e6c <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bf0:	f000 f87c 	bl	8000cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <MX_TIM1_Init+0x98>)
 8000c02:	f002 f9cd 	bl	8002fa0 <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c0c:	f000 f86e 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_TIM1_Init+0x98>)
 8000c1e:	f002 fb8b 	bl	8003338 <HAL_TIMEx_MasterConfigSynchronization>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c28:	f000 f860 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200000dc 	.word	0x200000dc
 8000c38:	40012c00 	.word	0x40012c00

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c50:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <MX_GPIO_Init+0xa8>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a23      	ldr	r2, [pc, #140]	@ (8000ce4 <MX_GPIO_Init+0xa8>)
 8000c56:	f043 0320 	orr.w	r3, r3, #32
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <MX_GPIO_Init+0xa8>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0320 	and.w	r3, r3, #32
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <MX_GPIO_Init+0xa8>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce4 <MX_GPIO_Init+0xa8>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <MX_GPIO_Init+0xa8>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c80:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <MX_GPIO_Init+0xa8>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a17      	ldr	r2, [pc, #92]	@ (8000ce4 <MX_GPIO_Init+0xa8>)
 8000c86:	f043 0308 	orr.w	r3, r3, #8
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_GPIO_Init+0xa8>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0308 	and.w	r3, r3, #8
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c9e:	4812      	ldr	r0, [pc, #72]	@ (8000ce8 <MX_GPIO_Init+0xac>)
 8000ca0:	f000 ff05 	bl	8001aae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ca4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480b      	ldr	r0, [pc, #44]	@ (8000ce8 <MX_GPIO_Init+0xac>)
 8000cba:	f000 fd5d 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4804      	ldr	r0, [pc, #16]	@ (8000ce8 <MX_GPIO_Init+0xac>)
 8000cd8:	f000 fd4e 	bl	8001778 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010800 	.word	0x40010800

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <Error_Handler+0x8>

08000cf8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000cfe:	f000 fa1d 	bl	800113c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000d02:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000d06:	2201      	movs	r2, #1
 8000d08:	2178      	movs	r1, #120	@ 0x78
 8000d0a:	485b      	ldr	r0, [pc, #364]	@ (8000e78 <SSD1306_Init+0x180>)
 8000d0c:	f001 f92a 	bl	8001f64 <HAL_I2C_IsDeviceReady>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e0a9      	b.n	8000e6e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000d1a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000d1e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d20:	e002      	b.n	8000d28 <SSD1306_Init+0x30>
		p--;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f9      	bne.n	8000d22 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000d2e:	22ae      	movs	r2, #174	@ 0xae
 8000d30:	2100      	movs	r1, #0
 8000d32:	2078      	movs	r0, #120	@ 0x78
 8000d34:	f000 fa7c 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000d38:	2220      	movs	r2, #32
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2078      	movs	r0, #120	@ 0x78
 8000d3e:	f000 fa77 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d42:	2210      	movs	r2, #16
 8000d44:	2100      	movs	r1, #0
 8000d46:	2078      	movs	r0, #120	@ 0x78
 8000d48:	f000 fa72 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d4c:	22b0      	movs	r2, #176	@ 0xb0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2078      	movs	r0, #120	@ 0x78
 8000d52:	f000 fa6d 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000d56:	22c8      	movs	r2, #200	@ 0xc8
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2078      	movs	r0, #120	@ 0x78
 8000d5c:	f000 fa68 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	2078      	movs	r0, #120	@ 0x78
 8000d66:	f000 fa63 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d6a:	2210      	movs	r2, #16
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2078      	movs	r0, #120	@ 0x78
 8000d70:	f000 fa5e 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000d74:	2240      	movs	r2, #64	@ 0x40
 8000d76:	2100      	movs	r1, #0
 8000d78:	2078      	movs	r0, #120	@ 0x78
 8000d7a:	f000 fa59 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000d7e:	2281      	movs	r2, #129	@ 0x81
 8000d80:	2100      	movs	r1, #0
 8000d82:	2078      	movs	r0, #120	@ 0x78
 8000d84:	f000 fa54 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000d88:	22ff      	movs	r2, #255	@ 0xff
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2078      	movs	r0, #120	@ 0x78
 8000d8e:	f000 fa4f 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000d92:	22a1      	movs	r2, #161	@ 0xa1
 8000d94:	2100      	movs	r1, #0
 8000d96:	2078      	movs	r0, #120	@ 0x78
 8000d98:	f000 fa4a 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000d9c:	22a6      	movs	r2, #166	@ 0xa6
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2078      	movs	r0, #120	@ 0x78
 8000da2:	f000 fa45 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000da6:	22a8      	movs	r2, #168	@ 0xa8
 8000da8:	2100      	movs	r1, #0
 8000daa:	2078      	movs	r0, #120	@ 0x78
 8000dac:	f000 fa40 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000db0:	223f      	movs	r2, #63	@ 0x3f
 8000db2:	2100      	movs	r1, #0
 8000db4:	2078      	movs	r0, #120	@ 0x78
 8000db6:	f000 fa3b 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000dba:	22a4      	movs	r2, #164	@ 0xa4
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2078      	movs	r0, #120	@ 0x78
 8000dc0:	f000 fa36 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000dc4:	22d3      	movs	r2, #211	@ 0xd3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2078      	movs	r0, #120	@ 0x78
 8000dca:	f000 fa31 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2078      	movs	r0, #120	@ 0x78
 8000dd4:	f000 fa2c 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000dd8:	22d5      	movs	r2, #213	@ 0xd5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2078      	movs	r0, #120	@ 0x78
 8000dde:	f000 fa27 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000de2:	22f0      	movs	r2, #240	@ 0xf0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2078      	movs	r0, #120	@ 0x78
 8000de8:	f000 fa22 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000dec:	22d9      	movs	r2, #217	@ 0xd9
 8000dee:	2100      	movs	r1, #0
 8000df0:	2078      	movs	r0, #120	@ 0x78
 8000df2:	f000 fa1d 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000df6:	2222      	movs	r2, #34	@ 0x22
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2078      	movs	r0, #120	@ 0x78
 8000dfc:	f000 fa18 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000e00:	22da      	movs	r2, #218	@ 0xda
 8000e02:	2100      	movs	r1, #0
 8000e04:	2078      	movs	r0, #120	@ 0x78
 8000e06:	f000 fa13 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000e0a:	2212      	movs	r2, #18
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2078      	movs	r0, #120	@ 0x78
 8000e10:	f000 fa0e 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000e14:	22db      	movs	r2, #219	@ 0xdb
 8000e16:	2100      	movs	r1, #0
 8000e18:	2078      	movs	r0, #120	@ 0x78
 8000e1a:	f000 fa09 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000e1e:	2220      	movs	r2, #32
 8000e20:	2100      	movs	r1, #0
 8000e22:	2078      	movs	r0, #120	@ 0x78
 8000e24:	f000 fa04 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000e28:	228d      	movs	r2, #141	@ 0x8d
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2078      	movs	r0, #120	@ 0x78
 8000e2e:	f000 f9ff 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000e32:	2214      	movs	r2, #20
 8000e34:	2100      	movs	r1, #0
 8000e36:	2078      	movs	r0, #120	@ 0x78
 8000e38:	f000 f9fa 	bl	8001230 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000e3c:	22af      	movs	r2, #175	@ 0xaf
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2078      	movs	r0, #120	@ 0x78
 8000e42:	f000 f9f5 	bl	8001230 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e46:	222e      	movs	r2, #46	@ 0x2e
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2078      	movs	r0, #120	@ 0x78
 8000e4c:	f000 f9f0 	bl	8001230 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f843 	bl	8000edc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000e56:	f000 f813 	bl	8000e80 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <SSD1306_Init+0x184>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <SSD1306_Init+0x184>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e66:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <SSD1306_Init+0x184>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000088 	.word	0x20000088
 8000e7c:	20000544 	.word	0x20000544

08000e80 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000e86:	2300      	movs	r3, #0
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	e01d      	b.n	8000ec8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	3b50      	subs	r3, #80	@ 0x50
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	2100      	movs	r1, #0
 8000e96:	2078      	movs	r0, #120	@ 0x78
 8000e98:	f000 f9ca 	bl	8001230 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2078      	movs	r0, #120	@ 0x78
 8000ea2:	f000 f9c5 	bl	8001230 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2078      	movs	r0, #120	@ 0x78
 8000eac:	f000 f9c0 	bl	8001230 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	01db      	lsls	r3, r3, #7
 8000eb4:	4a08      	ldr	r2, [pc, #32]	@ (8000ed8 <SSD1306_UpdateScreen+0x58>)
 8000eb6:	441a      	add	r2, r3
 8000eb8:	2380      	movs	r3, #128	@ 0x80
 8000eba:	2140      	movs	r1, #64	@ 0x40
 8000ebc:	2078      	movs	r0, #120	@ 0x78
 8000ebe:	f000 f951 	bl	8001164 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	2b07      	cmp	r3, #7
 8000ecc:	d9de      	bls.n	8000e8c <SSD1306_UpdateScreen+0xc>
	}
}
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000144 	.word	0x20000144

08000edc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <SSD1306_Fill+0x14>
 8000eec:	2300      	movs	r3, #0
 8000eee:	e000      	b.n	8000ef2 <SSD1306_Fill+0x16>
 8000ef0:	23ff      	movs	r3, #255	@ 0xff
 8000ef2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <SSD1306_Fill+0x2c>)
 8000efa:	f002 fa9d 	bl	8003438 <memset>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000144 	.word	0x20000144

08000f0c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
 8000f16:	460b      	mov	r3, r1
 8000f18:	80bb      	strh	r3, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	70fb      	strb	r3, [r7, #3]
	if (
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f22:	d848      	bhi.n	8000fb6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f28:	d845      	bhi.n	8000fb6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000f2a:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <SSD1306_DrawPixel+0xb4>)
 8000f2c:	791b      	ldrb	r3, [r3, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf0c      	ite	eq
 8000f38:	2301      	moveq	r3, #1
 8000f3a:	2300      	movne	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d11a      	bne.n	8000f7c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f46:	88fa      	ldrh	r2, [r7, #6]
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	b298      	uxth	r0, r3
 8000f4e:	4603      	mov	r3, r0
 8000f50:	01db      	lsls	r3, r3, #7
 8000f52:	4413      	add	r3, r2
 8000f54:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc4 <SSD1306_DrawPixel+0xb8>)
 8000f56:	5cd3      	ldrb	r3, [r2, r3]
 8000f58:	b25a      	sxtb	r2, r3
 8000f5a:	88bb      	ldrh	r3, [r7, #4]
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	2101      	movs	r1, #1
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b259      	sxtb	r1, r3
 8000f6c:	88fa      	ldrh	r2, [r7, #6]
 8000f6e:	4603      	mov	r3, r0
 8000f70:	01db      	lsls	r3, r3, #7
 8000f72:	4413      	add	r3, r2
 8000f74:	b2c9      	uxtb	r1, r1
 8000f76:	4a13      	ldr	r2, [pc, #76]	@ (8000fc4 <SSD1306_DrawPixel+0xb8>)
 8000f78:	54d1      	strb	r1, [r2, r3]
 8000f7a:	e01d      	b.n	8000fb8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f7c:	88fa      	ldrh	r2, [r7, #6]
 8000f7e:	88bb      	ldrh	r3, [r7, #4]
 8000f80:	08db      	lsrs	r3, r3, #3
 8000f82:	b298      	uxth	r0, r3
 8000f84:	4603      	mov	r3, r0
 8000f86:	01db      	lsls	r3, r3, #7
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc4 <SSD1306_DrawPixel+0xb8>)
 8000f8c:	5cd3      	ldrb	r3, [r2, r3]
 8000f8e:	b25a      	sxtb	r2, r3
 8000f90:	88bb      	ldrh	r3, [r7, #4]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	2101      	movs	r1, #1
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	b259      	sxtb	r1, r3
 8000fa6:	88fa      	ldrh	r2, [r7, #6]
 8000fa8:	4603      	mov	r3, r0
 8000faa:	01db      	lsls	r3, r3, #7
 8000fac:	4413      	add	r3, r2
 8000fae:	b2c9      	uxtb	r1, r1
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <SSD1306_DrawPixel+0xb8>)
 8000fb2:	54d1      	strb	r1, [r2, r3]
 8000fb4:	e000      	b.n	8000fb8 <SSD1306_DrawPixel+0xac>
		return;
 8000fb6:	bf00      	nop
	}
}
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	20000544 	.word	0x20000544
 8000fc4:	20000144 	.word	0x20000144

08000fc8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	80fb      	strh	r3, [r7, #6]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000fd8:	4a05      	ldr	r2, [pc, #20]	@ (8000ff0 <SSD1306_GotoXY+0x28>)
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000fde:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <SSD1306_GotoXY+0x28>)
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	8053      	strh	r3, [r2, #2]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000544 	.word	0x20000544

08000ff4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	4613      	mov	r3, r2
 8001002:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001004:	4b39      	ldr	r3, [pc, #228]	@ (80010ec <SSD1306_Putc+0xf8>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
	if (
 8001010:	2b7f      	cmp	r3, #127	@ 0x7f
 8001012:	dc07      	bgt.n	8001024 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001014:	4b35      	ldr	r3, [pc, #212]	@ (80010ec <SSD1306_Putc+0xf8>)
 8001016:	885b      	ldrh	r3, [r3, #2]
 8001018:	461a      	mov	r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	785b      	ldrb	r3, [r3, #1]
 800101e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001020:	2b3f      	cmp	r3, #63	@ 0x3f
 8001022:	dd01      	ble.n	8001028 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001024:	2300      	movs	r3, #0
 8001026:	e05d      	b.n	80010e4 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e04b      	b.n	80010c6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	3b20      	subs	r3, #32
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	7849      	ldrb	r1, [r1, #1]
 800103a:	fb01 f303 	mul.w	r3, r1, r3
 800103e:	4619      	mov	r1, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	440b      	add	r3, r1
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800104c:	2300      	movs	r3, #0
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	e030      	b.n	80010b4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d010      	beq.n	8001084 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001062:	4b22      	ldr	r3, [pc, #136]	@ (80010ec <SSD1306_Putc+0xf8>)
 8001064:	881a      	ldrh	r2, [r3, #0]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	b29b      	uxth	r3, r3
 800106a:	4413      	add	r3, r2
 800106c:	b298      	uxth	r0, r3
 800106e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <SSD1306_Putc+0xf8>)
 8001070:	885a      	ldrh	r2, [r3, #2]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	b29b      	uxth	r3, r3
 8001076:	4413      	add	r3, r2
 8001078:	b29b      	uxth	r3, r3
 800107a:	79ba      	ldrb	r2, [r7, #6]
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff ff45 	bl	8000f0c <SSD1306_DrawPixel>
 8001082:	e014      	b.n	80010ae <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001084:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <SSD1306_Putc+0xf8>)
 8001086:	881a      	ldrh	r2, [r3, #0]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	b29b      	uxth	r3, r3
 800108c:	4413      	add	r3, r2
 800108e:	b298      	uxth	r0, r3
 8001090:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <SSD1306_Putc+0xf8>)
 8001092:	885a      	ldrh	r2, [r3, #2]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4413      	add	r3, r2
 800109a:	b299      	uxth	r1, r3
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bf0c      	ite	eq
 80010a2:	2301      	moveq	r3, #1
 80010a4:	2300      	movne	r3, #0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	f7ff ff2f 	bl	8000f0c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	3301      	adds	r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4293      	cmp	r3, r2
 80010be:	d3c8      	bcc.n	8001052 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3301      	adds	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	785b      	ldrb	r3, [r3, #1]
 80010ca:	461a      	mov	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d3ad      	bcc.n	800102e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <SSD1306_Putc+0xf8>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <SSD1306_Putc+0xf8>)
 80010e0:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000544 	.word	0x20000544

080010f0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80010fe:	e012      	b.n	8001126 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	79fa      	ldrb	r2, [r7, #7]
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff73 	bl	8000ff4 <SSD1306_Putc>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d002      	beq.n	8001120 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	e008      	b.n	8001132 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1e8      	bne.n	8001100 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	781b      	ldrb	r3, [r3, #0]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001142:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <ssd1306_I2C_Init+0x24>)
 8001144:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001146:	e002      	b.n	800114e <ssd1306_I2C_Init+0x12>
		p--;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f9      	bne.n	8001148 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	0003d090 	.word	0x0003d090

08001164 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b0c7      	sub	sp, #284	@ 0x11c
 8001168:	af02      	add	r7, sp, #8
 800116a:	4604      	mov	r4, r0
 800116c:	4608      	mov	r0, r1
 800116e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001172:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001176:	600a      	str	r2, [r1, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800117e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001182:	4622      	mov	r2, r4
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800118a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800118e:	4602      	mov	r2, r0
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001196:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800119a:	460a      	mov	r2, r1
 800119c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800119e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011a6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011aa:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80011ae:	7812      	ldrb	r2, [r2, #0]
 80011b0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80011b8:	e015      	b.n	80011e6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80011ba:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011be:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011c2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	441a      	add	r2, r3
 80011ca:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011ce:	3301      	adds	r3, #1
 80011d0:	7811      	ldrb	r1, [r2, #0]
 80011d2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011d6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80011da:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80011dc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011e0:	3301      	adds	r3, #1
 80011e2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80011e6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011f0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80011f4:	8812      	ldrh	r2, [r2, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d8df      	bhi.n	80011ba <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80011fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011fe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b299      	uxth	r1, r3
 8001206:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800120a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	b29b      	uxth	r3, r3
 8001214:	f107 020c 	add.w	r2, r7, #12
 8001218:	200a      	movs	r0, #10
 800121a:	9000      	str	r0, [sp, #0]
 800121c:	4803      	ldr	r0, [pc, #12]	@ (800122c <ssd1306_I2C_WriteMulti+0xc8>)
 800121e:	f000 fda3 	bl	8001d68 <HAL_I2C_Master_Transmit>
}
 8001222:	bf00      	nop
 8001224:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001228:	46bd      	mov	sp, r7
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	20000088 	.word	0x20000088

08001230 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af02      	add	r7, sp, #8
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	460b      	mov	r3, r1
 800123c:	71bb      	strb	r3, [r7, #6]
 800123e:	4613      	mov	r3, r2
 8001240:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	b299      	uxth	r1, r3
 800124e:	f107 020c 	add.w	r2, r7, #12
 8001252:	230a      	movs	r3, #10
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2302      	movs	r3, #2
 8001258:	4803      	ldr	r0, [pc, #12]	@ (8001268 <ssd1306_I2C_Write+0x38>)
 800125a:	f000 fd85 	bl	8001d68 <HAL_I2C_Master_Transmit>
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000088 	.word	0x20000088

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <HAL_MspInit+0x5c>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <HAL_MspInit+0x5c>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6193      	str	r3, [r2, #24]
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <HAL_MspInit+0x5c>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_MspInit+0x5c>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a0e      	ldr	r2, [pc, #56]	@ (80012c8 <HAL_MspInit+0x5c>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001294:	61d3      	str	r3, [r2, #28]
 8001296:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <HAL_MspInit+0x5c>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_MspInit+0x60>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <HAL_MspInit+0x60>)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40010000 	.word	0x40010000

080012d0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a15      	ldr	r2, [pc, #84]	@ (8001340 <HAL_I2C_MspInit+0x70>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d123      	bne.n	8001338 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <HAL_I2C_MspInit+0x74>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a13      	ldr	r2, [pc, #76]	@ (8001344 <HAL_I2C_MspInit+0x74>)
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <HAL_I2C_MspInit+0x74>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001308:	23c0      	movs	r3, #192	@ 0xc0
 800130a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130c:	2312      	movs	r3, #18
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	480b      	ldr	r0, [pc, #44]	@ (8001348 <HAL_I2C_MspInit+0x78>)
 800131c:	f000 fa2c 	bl	8001778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <HAL_I2C_MspInit+0x74>)
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <HAL_I2C_MspInit+0x74>)
 8001326:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800132a:	61d3      	str	r3, [r2, #28]
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_I2C_MspInit+0x74>)
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40005400 	.word	0x40005400
 8001344:	40021000 	.word	0x40021000
 8001348:	40010c00 	.word	0x40010c00

0800134c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <HAL_TIM_Base_MspInit+0x34>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d10b      	bne.n	8001376 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <HAL_TIM_Base_MspInit+0x38>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a08      	ldr	r2, [pc, #32]	@ (8001384 <HAL_TIM_Base_MspInit+0x38>)
 8001364:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <HAL_TIM_Base_MspInit+0x38>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40012c00 	.word	0x40012c00
 8001384:	40021000 	.word	0x40021000

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <NMI_Handler+0x4>

08001390 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <MemManage_Handler+0x4>

080013a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <UsageFault_Handler+0x4>

080013b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d8:	f000 f8aa 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e8:	4a14      	ldr	r2, [pc, #80]	@ (800143c <_sbrk+0x5c>)
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <_sbrk+0x60>)
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f4:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d102      	bne.n	8001402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <_sbrk+0x64>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <_sbrk+0x68>)
 8001400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	429a      	cmp	r2, r3
 800140e:	d207      	bcs.n	8001420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001410:	f002 f81a 	bl	8003448 <__errno>
 8001414:	4603      	mov	r3, r0
 8001416:	220c      	movs	r2, #12
 8001418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	e009      	b.n	8001434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001426:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <_sbrk+0x64>)
 8001430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20005000 	.word	0x20005000
 8001440:	00000400 	.word	0x00000400
 8001444:	2000054c 	.word	0x2000054c
 8001448:	200006a0 	.word	0x200006a0

0800144c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001458:	f7ff fff8 	bl	800144c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480b      	ldr	r0, [pc, #44]	@ (800148c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800145e:	490c      	ldr	r1, [pc, #48]	@ (8001490 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001460:	4a0c      	ldr	r2, [pc, #48]	@ (8001494 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001474:	4c09      	ldr	r4, [pc, #36]	@ (800149c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001482:	f001 ffe7 	bl	8003454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001486:	f7ff fa53 	bl	8000930 <main>
  bx lr
 800148a:	4770      	bx	lr
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001494:	08005e90 	.word	0x08005e90
  ldr r2, =_sbss
 8001498:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800149c:	2000069c 	.word	0x2000069c

080014a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC1_2_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_Init+0x28>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <HAL_Init+0x28>)
 80014ae:	f043 0310 	orr.w	r3, r3, #16
 80014b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 f92b 	bl	8001710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ba:	200f      	movs	r0, #15
 80014bc:	f000 f808 	bl	80014d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c0:	f7ff fed4 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40022000 	.word	0x40022000

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_InitTick+0x54>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <HAL_InitTick+0x58>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f935 	bl	800175e <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 f90b 	bl	8001726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	@ (800152c <HAL_InitTick+0x5c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000010 	.word	0x20000010
 8001528:	20000018 	.word	0x20000018
 800152c:	20000014 	.word	0x20000014

08001530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001534:	4b05      	ldr	r3, [pc, #20]	@ (800154c <HAL_IncTick+0x1c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <HAL_IncTick+0x20>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a03      	ldr	r2, [pc, #12]	@ (8001550 <HAL_IncTick+0x20>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	20000018 	.word	0x20000018
 8001550:	20000550 	.word	0x20000550

08001554 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b02      	ldr	r3, [pc, #8]	@ (8001564 <HAL_GetTick+0x10>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000550 	.word	0x20000550

08001568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff fff0 	bl	8001554 <HAL_GetTick>
 8001574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d005      	beq.n	800158e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <HAL_Delay+0x44>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158e:	bf00      	nop
 8001590:	f7ff ffe0 	bl	8001554 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	429a      	cmp	r2, r3
 800159e:	d8f7      	bhi.n	8001590 <HAL_Delay+0x28>
  {
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000018 	.word	0x20000018

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	@ (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	@ (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	@ (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	@ 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f1c3 0307 	rsb	r3, r3, #7
 8001682:	2b04      	cmp	r3, #4
 8001684:	bf28      	it	cs
 8001686:	2304      	movcs	r3, #4
 8001688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3304      	adds	r3, #4
 800168e:	2b06      	cmp	r3, #6
 8001690:	d902      	bls.n	8001698 <NVIC_EncodePriority+0x30>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b03      	subs	r3, #3
 8001696:	e000      	b.n	800169a <NVIC_EncodePriority+0x32>
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	f04f 32ff 	mov.w	r2, #4294967295
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43d9      	mvns	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	4313      	orrs	r3, r2
         );
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	@ 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016dc:	d301      	bcc.n	80016e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016de:	2301      	movs	r3, #1
 80016e0:	e00f      	b.n	8001702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e2:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <SysTick_Config+0x40>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ea:	210f      	movs	r1, #15
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f7ff ff90 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f4:	4b05      	ldr	r3, [pc, #20]	@ (800170c <SysTick_Config+0x40>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	4b04      	ldr	r3, [pc, #16]	@ (800170c <SysTick_Config+0x40>)
 80016fc:	2207      	movs	r2, #7
 80016fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	e000e010 	.word	0xe000e010

08001710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff49 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001738:	f7ff ff5e 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 800173c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	f7ff ff90 	bl	8001668 <NVIC_EncodePriority>
 8001748:	4602      	mov	r2, r0
 800174a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff5f 	bl	8001614 <__NVIC_SetPriority>
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffb0 	bl	80016cc <SysTick_Config>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	b480      	push	{r7}
 800177a:	b08b      	sub	sp, #44	@ 0x2c
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178a:	e169      	b.n	8001a60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800178c:	2201      	movs	r2, #1
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	f040 8158 	bne.w	8001a5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4a9a      	ldr	r2, [pc, #616]	@ (8001a18 <HAL_GPIO_Init+0x2a0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d05e      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017b4:	4a98      	ldr	r2, [pc, #608]	@ (8001a18 <HAL_GPIO_Init+0x2a0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d875      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017ba:	4a98      	ldr	r2, [pc, #608]	@ (8001a1c <HAL_GPIO_Init+0x2a4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d058      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017c0:	4a96      	ldr	r2, [pc, #600]	@ (8001a1c <HAL_GPIO_Init+0x2a4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d86f      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017c6:	4a96      	ldr	r2, [pc, #600]	@ (8001a20 <HAL_GPIO_Init+0x2a8>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d052      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017cc:	4a94      	ldr	r2, [pc, #592]	@ (8001a20 <HAL_GPIO_Init+0x2a8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d869      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017d2:	4a94      	ldr	r2, [pc, #592]	@ (8001a24 <HAL_GPIO_Init+0x2ac>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d04c      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017d8:	4a92      	ldr	r2, [pc, #584]	@ (8001a24 <HAL_GPIO_Init+0x2ac>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d863      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017de:	4a92      	ldr	r2, [pc, #584]	@ (8001a28 <HAL_GPIO_Init+0x2b0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d046      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
 80017e4:	4a90      	ldr	r2, [pc, #576]	@ (8001a28 <HAL_GPIO_Init+0x2b0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d85d      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d82a      	bhi.n	8001844 <HAL_GPIO_Init+0xcc>
 80017ee:	2b12      	cmp	r3, #18
 80017f0:	d859      	bhi.n	80018a6 <HAL_GPIO_Init+0x12e>
 80017f2:	a201      	add	r2, pc, #4	@ (adr r2, 80017f8 <HAL_GPIO_Init+0x80>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001873 	.word	0x08001873
 80017fc:	0800184d 	.word	0x0800184d
 8001800:	0800185f 	.word	0x0800185f
 8001804:	080018a1 	.word	0x080018a1
 8001808:	080018a7 	.word	0x080018a7
 800180c:	080018a7 	.word	0x080018a7
 8001810:	080018a7 	.word	0x080018a7
 8001814:	080018a7 	.word	0x080018a7
 8001818:	080018a7 	.word	0x080018a7
 800181c:	080018a7 	.word	0x080018a7
 8001820:	080018a7 	.word	0x080018a7
 8001824:	080018a7 	.word	0x080018a7
 8001828:	080018a7 	.word	0x080018a7
 800182c:	080018a7 	.word	0x080018a7
 8001830:	080018a7 	.word	0x080018a7
 8001834:	080018a7 	.word	0x080018a7
 8001838:	080018a7 	.word	0x080018a7
 800183c:	08001855 	.word	0x08001855
 8001840:	08001869 	.word	0x08001869
 8001844:	4a79      	ldr	r2, [pc, #484]	@ (8001a2c <HAL_GPIO_Init+0x2b4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800184a:	e02c      	b.n	80018a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	623b      	str	r3, [r7, #32]
          break;
 8001852:	e029      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	3304      	adds	r3, #4
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e024      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	3308      	adds	r3, #8
 8001864:	623b      	str	r3, [r7, #32]
          break;
 8001866:	e01f      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	330c      	adds	r3, #12
 800186e:	623b      	str	r3, [r7, #32]
          break;
 8001870:	e01a      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800187a:	2304      	movs	r3, #4
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e013      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001888:	2308      	movs	r3, #8
 800188a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	611a      	str	r2, [r3, #16]
          break;
 8001892:	e009      	b.n	80018a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001894:	2308      	movs	r3, #8
 8001896:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	615a      	str	r2, [r3, #20]
          break;
 800189e:	e003      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
          break;
 80018a4:	e000      	b.n	80018a8 <HAL_GPIO_Init+0x130>
          break;
 80018a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2bff      	cmp	r3, #255	@ 0xff
 80018ac:	d801      	bhi.n	80018b2 <HAL_GPIO_Init+0x13a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	e001      	b.n	80018b6 <HAL_GPIO_Init+0x13e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3304      	adds	r3, #4
 80018b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2bff      	cmp	r3, #255	@ 0xff
 80018bc:	d802      	bhi.n	80018c4 <HAL_GPIO_Init+0x14c>
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	e002      	b.n	80018ca <HAL_GPIO_Init+0x152>
 80018c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c6:	3b08      	subs	r3, #8
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	210f      	movs	r1, #15
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	6a39      	ldr	r1, [r7, #32]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80b1 	beq.w	8001a5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a30 <HAL_GPIO_Init+0x2b8>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001a30 <HAL_GPIO_Init+0x2b8>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b4a      	ldr	r3, [pc, #296]	@ (8001a30 <HAL_GPIO_Init+0x2b8>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001910:	4a48      	ldr	r2, [pc, #288]	@ (8001a34 <HAL_GPIO_Init+0x2bc>)
 8001912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	220f      	movs	r2, #15
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a40      	ldr	r2, [pc, #256]	@ (8001a38 <HAL_GPIO_Init+0x2c0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d013      	beq.n	8001964 <HAL_GPIO_Init+0x1ec>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a3c <HAL_GPIO_Init+0x2c4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d00d      	beq.n	8001960 <HAL_GPIO_Init+0x1e8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a3e      	ldr	r2, [pc, #248]	@ (8001a40 <HAL_GPIO_Init+0x2c8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d007      	beq.n	800195c <HAL_GPIO_Init+0x1e4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a44 <HAL_GPIO_Init+0x2cc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d101      	bne.n	8001958 <HAL_GPIO_Init+0x1e0>
 8001954:	2303      	movs	r3, #3
 8001956:	e006      	b.n	8001966 <HAL_GPIO_Init+0x1ee>
 8001958:	2304      	movs	r3, #4
 800195a:	e004      	b.n	8001966 <HAL_GPIO_Init+0x1ee>
 800195c:	2302      	movs	r3, #2
 800195e:	e002      	b.n	8001966 <HAL_GPIO_Init+0x1ee>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <HAL_GPIO_Init+0x1ee>
 8001964:	2300      	movs	r3, #0
 8001966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001968:	f002 0203 	and.w	r2, r2, #3
 800196c:	0092      	lsls	r2, r2, #2
 800196e:	4093      	lsls	r3, r2
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001976:	492f      	ldr	r1, [pc, #188]	@ (8001a34 <HAL_GPIO_Init+0x2bc>)
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001990:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	492c      	ldr	r1, [pc, #176]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800199e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	4928      	ldr	r1, [pc, #160]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019b8:	4b23      	ldr	r3, [pc, #140]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	4922      	ldr	r1, [pc, #136]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60cb      	str	r3, [r1, #12]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c6:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	491e      	ldr	r1, [pc, #120]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e0:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4918      	ldr	r1, [pc, #96]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ee:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4914      	ldr	r1, [pc, #80]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d021      	beq.n	8001a4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a08:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	490e      	ldr	r1, [pc, #56]	@ (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e021      	b.n	8001a5a <HAL_GPIO_Init+0x2e2>
 8001a16:	bf00      	nop
 8001a18:	10320000 	.word	0x10320000
 8001a1c:	10310000 	.word	0x10310000
 8001a20:	10220000 	.word	0x10220000
 8001a24:	10210000 	.word	0x10210000
 8001a28:	10120000 	.word	0x10120000
 8001a2c:	10110000 	.word	0x10110000
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010000 	.word	0x40010000
 8001a38:	40010800 	.word	0x40010800
 8001a3c:	40010c00 	.word	0x40010c00
 8001a40:	40011000 	.word	0x40011000
 8001a44:	40011400 	.word	0x40011400
 8001a48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <HAL_GPIO_Init+0x304>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	4909      	ldr	r1, [pc, #36]	@ (8001a7c <HAL_GPIO_Init+0x304>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a66:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f47f ae8e 	bne.w	800178c <HAL_GPIO_Init+0x14>
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	372c      	adds	r7, #44	@ 0x2c
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	40010400 	.word	0x40010400

08001a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	887b      	ldrh	r3, [r7, #2]
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	e001      	b.n	8001aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	807b      	strh	r3, [r7, #2]
 8001aba:	4613      	mov	r3, r2
 8001abc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001abe:	787b      	ldrb	r3, [r7, #1]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac4:	887a      	ldrh	r2, [r7, #2]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aca:	e003      	b.n	8001ad4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	041a      	lsls	r2, r3, #16
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	611a      	str	r2, [r3, #16]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e12b      	b.n	8001d4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fbe2 	bl	80012d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2224      	movs	r2, #36	@ 0x24
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b44:	f001 f960 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8001b48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4a81      	ldr	r2, [pc, #516]	@ (8001d54 <HAL_I2C_Init+0x274>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d807      	bhi.n	8001b64 <HAL_I2C_Init+0x84>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4a80      	ldr	r2, [pc, #512]	@ (8001d58 <HAL_I2C_Init+0x278>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	bf94      	ite	ls
 8001b5c:	2301      	movls	r3, #1
 8001b5e:	2300      	movhi	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	e006      	b.n	8001b72 <HAL_I2C_Init+0x92>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4a7d      	ldr	r2, [pc, #500]	@ (8001d5c <HAL_I2C_Init+0x27c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	bf94      	ite	ls
 8001b6c:	2301      	movls	r3, #1
 8001b6e:	2300      	movhi	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0e7      	b.n	8001d4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4a78      	ldr	r2, [pc, #480]	@ (8001d60 <HAL_I2C_Init+0x280>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	0c9b      	lsrs	r3, r3, #18
 8001b84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4a6a      	ldr	r2, [pc, #424]	@ (8001d54 <HAL_I2C_Init+0x274>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d802      	bhi.n	8001bb4 <HAL_I2C_Init+0xd4>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	e009      	b.n	8001bc8 <HAL_I2C_Init+0xe8>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
 8001bbe:	4a69      	ldr	r2, [pc, #420]	@ (8001d64 <HAL_I2C_Init+0x284>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001bda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	495c      	ldr	r1, [pc, #368]	@ (8001d54 <HAL_I2C_Init+0x274>)
 8001be4:	428b      	cmp	r3, r1
 8001be6:	d819      	bhi.n	8001c1c <HAL_I2C_Init+0x13c>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	1e59      	subs	r1, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bf6:	1c59      	adds	r1, r3, #1
 8001bf8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001bfc:	400b      	ands	r3, r1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00a      	beq.n	8001c18 <HAL_I2C_Init+0x138>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1e59      	subs	r1, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c10:	3301      	adds	r3, #1
 8001c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c16:	e051      	b.n	8001cbc <HAL_I2C_Init+0x1dc>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	e04f      	b.n	8001cbc <HAL_I2C_Init+0x1dc>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d111      	bne.n	8001c48 <HAL_I2C_Init+0x168>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1e58      	subs	r0, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	440b      	add	r3, r1
 8001c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c36:	3301      	adds	r3, #1
 8001c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	e012      	b.n	8001c6e <HAL_I2C_Init+0x18e>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1e58      	subs	r0, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6859      	ldr	r1, [r3, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	0099      	lsls	r1, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf0c      	ite	eq
 8001c68:	2301      	moveq	r3, #1
 8001c6a:	2300      	movne	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_Init+0x196>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e022      	b.n	8001cbc <HAL_I2C_Init+0x1dc>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10e      	bne.n	8001c9c <HAL_I2C_Init+0x1bc>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1e58      	subs	r0, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6859      	ldr	r1, [r3, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	440b      	add	r3, r1
 8001c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c90:	3301      	adds	r3, #1
 8001c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c9a:	e00f      	b.n	8001cbc <HAL_I2C_Init+0x1dc>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1e58      	subs	r0, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	0099      	lsls	r1, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	6809      	ldr	r1, [r1, #0]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69da      	ldr	r2, [r3, #28]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001cea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6911      	ldr	r1, [r2, #16]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68d2      	ldr	r2, [r2, #12]
 8001cf6:	4311      	orrs	r1, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2220      	movs	r2, #32
 8001d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	000186a0 	.word	0x000186a0
 8001d58:	001e847f 	.word	0x001e847f
 8001d5c:	003d08ff 	.word	0x003d08ff
 8001d60:	431bde83 	.word	0x431bde83
 8001d64:	10624dd3 	.word	0x10624dd3

08001d68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	461a      	mov	r2, r3
 8001d74:	460b      	mov	r3, r1
 8001d76:	817b      	strh	r3, [r7, #10]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	f7ff fbea 	bl	8001554 <HAL_GetTick>
 8001d80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	f040 80e0 	bne.w	8001f50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2319      	movs	r3, #25
 8001d96:	2201      	movs	r2, #1
 8001d98:	4970      	ldr	r1, [pc, #448]	@ (8001f5c <HAL_I2C_Master_Transmit+0x1f4>)
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 fa92 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001da6:	2302      	movs	r3, #2
 8001da8:	e0d3      	b.n	8001f52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_I2C_Master_Transmit+0x50>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e0cc      	b.n	8001f52 <HAL_I2C_Master_Transmit+0x1ea>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d007      	beq.n	8001dde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0201 	orr.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2221      	movs	r2, #33	@ 0x21
 8001df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	893a      	ldrh	r2, [r7, #8]
 8001e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4a50      	ldr	r2, [pc, #320]	@ (8001f60 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e20:	8979      	ldrh	r1, [r7, #10]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	6a3a      	ldr	r2, [r7, #32]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f9ca 	bl	80021c0 <I2C_MasterRequestWrite>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e08d      	b.n	8001f52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e4c:	e066      	b.n	8001f1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	6a39      	ldr	r1, [r7, #32]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 fb50 	bl	80024f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00d      	beq.n	8001e7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d107      	bne.n	8001e76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e06b      	b.n	8001f52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_I2C_Master_Transmit+0x188>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d017      	beq.n	8001ef0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	6a39      	ldr	r1, [r7, #32]
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 fb47 	bl	8002588 <I2C_WaitOnBTFFlagUntilTimeout>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00d      	beq.n	8001f1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d107      	bne.n	8001f18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e01a      	b.n	8001f52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d194      	bne.n	8001e4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f50:	2302      	movs	r3, #2
  }
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	00100002 	.word	0x00100002
 8001f60:	ffff0000 	.word	0xffff0000

08001f64 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	@ 0x28
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	460b      	mov	r3, r1
 8001f72:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff faee 	bl	8001554 <HAL_GetTick>
 8001f78:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	f040 8111 	bne.w	80021ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2319      	movs	r3, #25
 8001f92:	2201      	movs	r2, #1
 8001f94:	4988      	ldr	r1, [pc, #544]	@ (80021b8 <HAL_I2C_IsDeviceReady+0x254>)
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f994 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e104      	b.n	80021b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_I2C_IsDeviceReady+0x50>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e0fd      	b.n	80021b0 <HAL_I2C_IsDeviceReady+0x24c>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d007      	beq.n	8001fda <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0201 	orr.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fe8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2224      	movs	r2, #36	@ 0x24
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4a70      	ldr	r2, [pc, #448]	@ (80021bc <HAL_I2C_IsDeviceReady+0x258>)
 8001ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800200c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2200      	movs	r2, #0
 8002016:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f952 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00d      	beq.n	8002042 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002034:	d103      	bne.n	800203e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800203c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e0b6      	b.n	80021b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002042:	897b      	ldrh	r3, [r7, #10]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002050:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002052:	f7ff fa7f 	bl	8001554 <HAL_GetTick>
 8002056:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b02      	cmp	r3, #2
 8002064:	bf0c      	ite	eq
 8002066:	2301      	moveq	r3, #1
 8002068:	2300      	movne	r3, #0
 800206a:	b2db      	uxtb	r3, r3
 800206c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207c:	bf0c      	ite	eq
 800207e:	2301      	moveq	r3, #1
 8002080:	2300      	movne	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002086:	e025      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002088:	f7ff fa64 	bl	8001554 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d302      	bcc.n	800209e <HAL_I2C_IsDeviceReady+0x13a>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d103      	bne.n	80020a6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	22a0      	movs	r2, #160	@ 0xa0
 80020a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2ba0      	cmp	r3, #160	@ 0xa0
 80020de:	d005      	beq.n	80020ec <HAL_I2C_IsDeviceReady+0x188>
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <HAL_I2C_IsDeviceReady+0x188>
 80020e6:	7dbb      	ldrb	r3, [r7, #22]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0cd      	beq.n	8002088 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d129      	bne.n	8002156 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002110:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2319      	movs	r3, #25
 800212e:	2201      	movs	r2, #1
 8002130:	4921      	ldr	r1, [pc, #132]	@ (80021b8 <HAL_I2C_IsDeviceReady+0x254>)
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f8c6 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e036      	b.n	80021b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e02c      	b.n	80021b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002164:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800216e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2319      	movs	r3, #25
 8002176:	2201      	movs	r2, #1
 8002178:	490f      	ldr	r1, [pc, #60]	@ (80021b8 <HAL_I2C_IsDeviceReady+0x254>)
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f8a2 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e012      	b.n	80021b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	3301      	adds	r3, #1
 800218e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	f4ff af32 	bcc.w	8001ffe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80021ae:	2302      	movs	r3, #2
  }
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3720      	adds	r7, #32
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	00100002 	.word	0x00100002
 80021bc:	ffff0000 	.word	0xffff0000

080021c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	460b      	mov	r3, r1
 80021ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d006      	beq.n	80021ea <I2C_MasterRequestWrite+0x2a>
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d003      	beq.n	80021ea <I2C_MasterRequestWrite+0x2a>
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021e8:	d108      	bne.n	80021fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e00b      	b.n	8002214 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	2b12      	cmp	r3, #18
 8002202:	d107      	bne.n	8002214 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002212:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f84f 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00d      	beq.n	8002248 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800223a:	d103      	bne.n	8002244 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e035      	b.n	80022b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002250:	d108      	bne.n	8002264 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002252:	897b      	ldrh	r3, [r7, #10]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002260:	611a      	str	r2, [r3, #16]
 8002262:	e01b      	b.n	800229c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002264:	897b      	ldrh	r3, [r7, #10]
 8002266:	11db      	asrs	r3, r3, #7
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f003 0306 	and.w	r3, r3, #6
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f063 030f 	orn	r3, r3, #15
 8002274:	b2da      	uxtb	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	490e      	ldr	r1, [pc, #56]	@ (80022bc <I2C_MasterRequestWrite+0xfc>)
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f898 	bl	80023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e010      	b.n	80022b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002292:	897b      	ldrh	r3, [r7, #10]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4907      	ldr	r1, [pc, #28]	@ (80022c0 <I2C_MasterRequestWrite+0x100>)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f888 	bl	80023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	00010008 	.word	0x00010008
 80022c0:	00010002 	.word	0x00010002

080022c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d4:	e048      	b.n	8002368 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d044      	beq.n	8002368 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022de:	f7ff f939 	bl	8001554 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d302      	bcc.n	80022f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d139      	bne.n	8002368 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	0c1b      	lsrs	r3, r3, #16
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d10d      	bne.n	800231a <I2C_WaitOnFlagUntilTimeout+0x56>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	43da      	mvns	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	4013      	ands	r3, r2
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	e00c      	b.n	8002334 <I2C_WaitOnFlagUntilTimeout+0x70>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	43da      	mvns	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4013      	ands	r3, r2
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	429a      	cmp	r2, r3
 8002338:	d116      	bne.n	8002368 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e023      	b.n	80023b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	0c1b      	lsrs	r3, r3, #16
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d10d      	bne.n	800238e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	43da      	mvns	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4013      	ands	r3, r2
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	e00c      	b.n	80023a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	43da      	mvns	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4013      	ands	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d093      	beq.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023c6:	e071      	b.n	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023d6:	d123      	bne.n	8002420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	f043 0204 	orr.w	r2, r3, #4
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e067      	b.n	80024f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002426:	d041      	beq.n	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002428:	f7ff f894 	bl	8001554 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	d302      	bcc.n	800243e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d136      	bne.n	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	d10c      	bne.n	8002462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4013      	ands	r3, r2
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	bf14      	ite	ne
 800245a:	2301      	movne	r3, #1
 800245c:	2300      	moveq	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	e00b      	b.n	800247a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	43da      	mvns	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	4013      	ands	r3, r2
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf14      	ite	ne
 8002474:	2301      	movne	r3, #1
 8002476:	2300      	moveq	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d016      	beq.n	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	f043 0220 	orr.w	r2, r3, #32
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e021      	b.n	80024f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	0c1b      	lsrs	r3, r3, #16
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10c      	bne.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	43da      	mvns	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4013      	ands	r3, r2
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e00b      	b.n	80024e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	43da      	mvns	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4013      	ands	r3, r2
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf14      	ite	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	2300      	moveq	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f47f af6d 	bne.w	80023c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002504:	e034      	b.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f886 	bl	8002618 <I2C_IsAcknowledgeFailed>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e034      	b.n	8002580 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d028      	beq.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7ff f819 	bl	8001554 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d11d      	bne.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253e:	2b80      	cmp	r3, #128	@ 0x80
 8002540:	d016      	beq.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	f043 0220 	orr.w	r2, r3, #32
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e007      	b.n	8002580 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257a:	2b80      	cmp	r3, #128	@ 0x80
 800257c:	d1c3      	bne.n	8002506 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002594:	e034      	b.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f83e 	bl	8002618 <I2C_IsAcknowledgeFailed>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e034      	b.n	8002610 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d028      	beq.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ae:	f7fe ffd1 	bl	8001554 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d302      	bcc.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d11d      	bne.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d016      	beq.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e007      	b.n	8002610 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d1c3      	bne.n	8002596 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800262e:	d11b      	bne.n	8002668 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002638:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	f043 0204 	orr.w	r2, r3, #4
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e272      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8087 	beq.w	80027a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002694:	4b92      	ldr	r3, [pc, #584]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b04      	cmp	r3, #4
 800269e:	d00c      	beq.n	80026ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026a0:	4b8f      	ldr	r3, [pc, #572]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d112      	bne.n	80026d2 <HAL_RCC_OscConfig+0x5e>
 80026ac:	4b8c      	ldr	r3, [pc, #560]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b8:	d10b      	bne.n	80026d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ba:	4b89      	ldr	r3, [pc, #548]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d06c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x12c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d168      	bne.n	80027a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e24c      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x76>
 80026dc:	4b80      	ldr	r3, [pc, #512]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a7f      	ldr	r2, [pc, #508]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e02e      	b.n	8002748 <HAL_RCC_OscConfig+0xd4>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x98>
 80026f2:	4b7b      	ldr	r3, [pc, #492]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a7a      	ldr	r2, [pc, #488]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b78      	ldr	r3, [pc, #480]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a77      	ldr	r2, [pc, #476]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002704:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e01d      	b.n	8002748 <HAL_RCC_OscConfig+0xd4>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0xbc>
 8002716:	4b72      	ldr	r3, [pc, #456]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a71      	ldr	r2, [pc, #452]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 800271c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	4b6f      	ldr	r3, [pc, #444]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a6e      	ldr	r2, [pc, #440]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e00b      	b.n	8002748 <HAL_RCC_OscConfig+0xd4>
 8002730:	4b6b      	ldr	r3, [pc, #428]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6a      	ldr	r2, [pc, #424]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b68      	ldr	r3, [pc, #416]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a67      	ldr	r2, [pc, #412]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002746:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d013      	beq.n	8002778 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe ff00 	bl	8001554 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe fefc 	bl	8001554 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	@ 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e200      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	4b5d      	ldr	r3, [pc, #372]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0xe4>
 8002776:	e014      	b.n	80027a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe feec 	bl	8001554 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002780:	f7fe fee8 	bl	8001554 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	@ 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e1ec      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002792:	4b53      	ldr	r3, [pc, #332]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x10c>
 800279e:	e000      	b.n	80027a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d063      	beq.n	8002876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ae:	4b4c      	ldr	r3, [pc, #304]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00b      	beq.n	80027d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027ba:	4b49      	ldr	r3, [pc, #292]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d11c      	bne.n	8002800 <HAL_RCC_OscConfig+0x18c>
 80027c6:	4b46      	ldr	r3, [pc, #280]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d116      	bne.n	8002800 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d2:	4b43      	ldr	r3, [pc, #268]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_RCC_OscConfig+0x176>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e1c0      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ea:	4b3d      	ldr	r3, [pc, #244]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4939      	ldr	r1, [pc, #228]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fe:	e03a      	b.n	8002876 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d020      	beq.n	800284a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002808:	4b36      	ldr	r3, [pc, #216]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe fea1 	bl	8001554 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002816:	f7fe fe9d 	bl	8001554 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e1a1      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002828:	4b2d      	ldr	r3, [pc, #180]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002834:	4b2a      	ldr	r3, [pc, #168]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4927      	ldr	r1, [pc, #156]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 8002844:	4313      	orrs	r3, r2
 8002846:	600b      	str	r3, [r1, #0]
 8002848:	e015      	b.n	8002876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800284a:	4b26      	ldr	r3, [pc, #152]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fe80 	bl	8001554 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002858:	f7fe fe7c 	bl	8001554 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e180      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286a:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d03a      	beq.n	80028f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d019      	beq.n	80028be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800288a:	4b17      	ldr	r3, [pc, #92]	@ (80028e8 <HAL_RCC_OscConfig+0x274>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002890:	f7fe fe60 	bl	8001554 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002898:	f7fe fe5c 	bl	8001554 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e160      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028aa:	4b0d      	ldr	r3, [pc, #52]	@ (80028e0 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028b6:	2001      	movs	r0, #1
 80028b8:	f000 faba 	bl	8002e30 <RCC_Delay>
 80028bc:	e01c      	b.n	80028f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028be:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <HAL_RCC_OscConfig+0x274>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c4:	f7fe fe46 	bl	8001554 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ca:	e00f      	b.n	80028ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028cc:	f7fe fe42 	bl	8001554 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d908      	bls.n	80028ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e146      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	42420000 	.word	0x42420000
 80028e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ec:	4b92      	ldr	r3, [pc, #584]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e9      	bne.n	80028cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80a6 	beq.w	8002a52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290a:	4b8b      	ldr	r3, [pc, #556]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10d      	bne.n	8002932 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	4b88      	ldr	r3, [pc, #544]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	4a87      	ldr	r2, [pc, #540]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002920:	61d3      	str	r3, [r2, #28]
 8002922:	4b85      	ldr	r3, [pc, #532]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292e:	2301      	movs	r3, #1
 8002930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002932:	4b82      	ldr	r3, [pc, #520]	@ (8002b3c <HAL_RCC_OscConfig+0x4c8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d118      	bne.n	8002970 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800293e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b3c <HAL_RCC_OscConfig+0x4c8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a7e      	ldr	r2, [pc, #504]	@ (8002b3c <HAL_RCC_OscConfig+0x4c8>)
 8002944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294a:	f7fe fe03 	bl	8001554 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002952:	f7fe fdff 	bl	8001554 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b64      	cmp	r3, #100	@ 0x64
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e103      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	4b75      	ldr	r3, [pc, #468]	@ (8002b3c <HAL_RCC_OscConfig+0x4c8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x312>
 8002978:	4b6f      	ldr	r3, [pc, #444]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	4a6e      	ldr	r2, [pc, #440]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6213      	str	r3, [r2, #32]
 8002984:	e02d      	b.n	80029e2 <HAL_RCC_OscConfig+0x36e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x334>
 800298e:	4b6a      	ldr	r3, [pc, #424]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4a69      	ldr	r2, [pc, #420]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6213      	str	r3, [r2, #32]
 800299a:	4b67      	ldr	r3, [pc, #412]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4a66      	ldr	r2, [pc, #408]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	f023 0304 	bic.w	r3, r3, #4
 80029a4:	6213      	str	r3, [r2, #32]
 80029a6:	e01c      	b.n	80029e2 <HAL_RCC_OscConfig+0x36e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d10c      	bne.n	80029ca <HAL_RCC_OscConfig+0x356>
 80029b0:	4b61      	ldr	r3, [pc, #388]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	4a60      	ldr	r2, [pc, #384]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	6213      	str	r3, [r2, #32]
 80029bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6213      	str	r3, [r2, #32]
 80029c8:	e00b      	b.n	80029e2 <HAL_RCC_OscConfig+0x36e>
 80029ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6213      	str	r3, [r2, #32]
 80029d6:	4b58      	ldr	r3, [pc, #352]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	4a57      	ldr	r2, [pc, #348]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	f023 0304 	bic.w	r3, r3, #4
 80029e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d015      	beq.n	8002a16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ea:	f7fe fdb3 	bl	8001554 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7fe fdaf 	bl	8001554 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e0b1      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a08:	4b4b      	ldr	r3, [pc, #300]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ee      	beq.n	80029f2 <HAL_RCC_OscConfig+0x37e>
 8002a14:	e014      	b.n	8002a40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7fe fd9d 	bl	8001554 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7fe fd99 	bl	8001554 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e09b      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a34:	4b40      	ldr	r3, [pc, #256]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ee      	bne.n	8002a1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d105      	bne.n	8002a52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a46:	4b3c      	ldr	r3, [pc, #240]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8087 	beq.w	8002b6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a5c:	4b36      	ldr	r3, [pc, #216]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d061      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d146      	bne.n	8002afe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a70:	4b33      	ldr	r3, [pc, #204]	@ (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7fe fd6d 	bl	8001554 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7fe fd69 	bl	8001554 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e06d      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a90:	4b29      	ldr	r3, [pc, #164]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f0      	bne.n	8002a7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa4:	d108      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aa6:	4b24      	ldr	r3, [pc, #144]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	4921      	ldr	r1, [pc, #132]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a19      	ldr	r1, [r3, #32]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	491b      	ldr	r1, [pc, #108]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fd3d 	bl	8001554 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fe fd39 	bl	8001554 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e03d      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af0:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x46a>
 8002afc:	e035      	b.n	8002b6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afe:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe fd26 	bl	8001554 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe fd22 	bl	8001554 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e026      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b1e:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x498>
 8002b2a:	e01e      	b.n	8002b6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e019      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_RCC_OscConfig+0x500>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d106      	bne.n	8002b66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d001      	beq.n	8002b6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000

08002b78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0d0      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d910      	bls.n	8002bbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	4b67      	ldr	r3, [pc, #412]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 0207 	bic.w	r2, r3, #7
 8002ba2:	4965      	ldr	r1, [pc, #404]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b63      	ldr	r3, [pc, #396]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0b8      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d020      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd4:	4b59      	ldr	r3, [pc, #356]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a58      	ldr	r2, [pc, #352]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bec:	4b53      	ldr	r3, [pc, #332]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4a52      	ldr	r2, [pc, #328]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002bf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf8:	4b50      	ldr	r3, [pc, #320]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	494d      	ldr	r1, [pc, #308]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d040      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	4b47      	ldr	r3, [pc, #284]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d115      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e07f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c36:	4b41      	ldr	r3, [pc, #260]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e073      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c46:	4b3d      	ldr	r3, [pc, #244]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e06b      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c56:	4b39      	ldr	r3, [pc, #228]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f023 0203 	bic.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4936      	ldr	r1, [pc, #216]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c68:	f7fe fc74 	bl	8001554 <HAL_GetTick>
 8002c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c70:	f7fe fc70 	bl	8001554 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e053      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	4b2d      	ldr	r3, [pc, #180]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 020c 	and.w	r2, r3, #12
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d1eb      	bne.n	8002c70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c98:	4b27      	ldr	r3, [pc, #156]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d210      	bcs.n	8002cc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b24      	ldr	r3, [pc, #144]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 0207 	bic.w	r2, r3, #7
 8002cae:	4922      	ldr	r1, [pc, #136]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b20      	ldr	r3, [pc, #128]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e032      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd4:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4916      	ldr	r1, [pc, #88]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cf2:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	490e      	ldr	r1, [pc, #56]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d06:	f000 f821 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	490a      	ldr	r1, [pc, #40]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	5ccb      	ldrb	r3, [r1, r3]
 8002d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1e:	4a09      	ldr	r2, [pc, #36]	@ (8002d44 <HAL_RCC_ClockConfig+0x1cc>)
 8002d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d22:	4b09      	ldr	r3, [pc, #36]	@ (8002d48 <HAL_RCC_ClockConfig+0x1d0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fbd2 	bl	80014d0 <HAL_InitTick>

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40022000 	.word	0x40022000
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	08005e28 	.word	0x08005e28
 8002d44:	20000010 	.word	0x20000010
 8002d48:	20000014 	.word	0x20000014

08002d4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d66:	4b1e      	ldr	r3, [pc, #120]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d002      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x30>
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d003      	beq.n	8002d82 <HAL_RCC_GetSysClockFreq+0x36>
 8002d7a:	e027      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d7c:	4b19      	ldr	r3, [pc, #100]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d7e:	613b      	str	r3, [r7, #16]
      break;
 8002d80:	e027      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	0c9b      	lsrs	r3, r3, #18
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	4a17      	ldr	r2, [pc, #92]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d8c:	5cd3      	ldrb	r3, [r2, r3]
 8002d8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d010      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d9a:	4b11      	ldr	r3, [pc, #68]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	0c5b      	lsrs	r3, r3, #17
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	4a11      	ldr	r2, [pc, #68]	@ (8002dec <HAL_RCC_GetSysClockFreq+0xa0>)
 8002da6:	5cd3      	ldrb	r3, [r2, r3]
 8002da8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a0d      	ldr	r2, [pc, #52]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dae:	fb03 f202 	mul.w	r2, r3, r2
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e004      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	613b      	str	r3, [r7, #16]
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dce:	613b      	str	r3, [r7, #16]
      break;
 8002dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd2:	693b      	ldr	r3, [r7, #16]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	007a1200 	.word	0x007a1200
 8002de8:	08005e40 	.word	0x08005e40
 8002dec:	08005e50 	.word	0x08005e50
 8002df0:	003d0900 	.word	0x003d0900

08002df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df8:	4b02      	ldr	r3, [pc, #8]	@ (8002e04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	20000010 	.word	0x20000010

08002e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e0c:	f7ff fff2 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4903      	ldr	r1, [pc, #12]	@ (8002e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08005e38 	.word	0x08005e38

08002e30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e38:	4b0a      	ldr	r3, [pc, #40]	@ (8002e64 <RCC_Delay+0x34>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e68 <RCC_Delay+0x38>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	0a5b      	lsrs	r3, r3, #9
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e4c:	bf00      	nop
  }
  while (Delay --);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1e5a      	subs	r2, r3, #1
 8002e52:	60fa      	str	r2, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f9      	bne.n	8002e4c <RCC_Delay+0x1c>
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	20000010 	.word	0x20000010
 8002e68:	10624dd3 	.word	0x10624dd3

08002e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e041      	b.n	8002f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe fa5a 	bl	800134c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f000 f940 	bl	8003130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d001      	beq.n	8002f24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e032      	b.n	8002f8a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a18      	ldr	r2, [pc, #96]	@ (8002f94 <HAL_TIM_Base_Start+0x88>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00e      	beq.n	8002f54 <HAL_TIM_Base_Start+0x48>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3e:	d009      	beq.n	8002f54 <HAL_TIM_Base_Start+0x48>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a14      	ldr	r2, [pc, #80]	@ (8002f98 <HAL_TIM_Base_Start+0x8c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <HAL_TIM_Base_Start+0x48>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a13      	ldr	r2, [pc, #76]	@ (8002f9c <HAL_TIM_Base_Start+0x90>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d111      	bne.n	8002f78 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b06      	cmp	r3, #6
 8002f64:	d010      	beq.n	8002f88 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f76:	e007      	b.n	8002f88 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40012c00 	.word	0x40012c00
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800

08002fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIM_ConfigClockSource+0x1c>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e0b4      	b.n	8003126 <HAL_TIM_ConfigClockSource+0x186>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ff4:	d03e      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0xd4>
 8002ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ffa:	f200 8087 	bhi.w	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003002:	f000 8086 	beq.w	8003112 <HAL_TIM_ConfigClockSource+0x172>
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300a:	d87f      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800300c:	2b70      	cmp	r3, #112	@ 0x70
 800300e:	d01a      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0xa6>
 8003010:	2b70      	cmp	r3, #112	@ 0x70
 8003012:	d87b      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003014:	2b60      	cmp	r3, #96	@ 0x60
 8003016:	d050      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0x11a>
 8003018:	2b60      	cmp	r3, #96	@ 0x60
 800301a:	d877      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800301c:	2b50      	cmp	r3, #80	@ 0x50
 800301e:	d03c      	beq.n	800309a <HAL_TIM_ConfigClockSource+0xfa>
 8003020:	2b50      	cmp	r3, #80	@ 0x50
 8003022:	d873      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003024:	2b40      	cmp	r3, #64	@ 0x40
 8003026:	d058      	beq.n	80030da <HAL_TIM_ConfigClockSource+0x13a>
 8003028:	2b40      	cmp	r3, #64	@ 0x40
 800302a:	d86f      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800302c:	2b30      	cmp	r3, #48	@ 0x30
 800302e:	d064      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003030:	2b30      	cmp	r3, #48	@ 0x30
 8003032:	d86b      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d060      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	2b20      	cmp	r3, #32
 800303a:	d867      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05c      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003040:	2b10      	cmp	r3, #16
 8003042:	d05a      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8003044:	e062      	b.n	800310c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003056:	f000 f950 	bl	80032fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	609a      	str	r2, [r3, #8]
      break;
 8003072:	e04f      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003084:	f000 f939 	bl	80032fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003096:	609a      	str	r2, [r3, #8]
      break;
 8003098:	e03c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a6:	461a      	mov	r2, r3
 80030a8:	f000 f8b0 	bl	800320c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2150      	movs	r1, #80	@ 0x50
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 f907 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 80030b8:	e02c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c6:	461a      	mov	r2, r3
 80030c8:	f000 f8ce 	bl	8003268 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2160      	movs	r1, #96	@ 0x60
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f8f7 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 80030d8:	e01c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e6:	461a      	mov	r2, r3
 80030e8:	f000 f890 	bl	800320c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2140      	movs	r1, #64	@ 0x40
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f8e7 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 80030f8:	e00c      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f000 f8de 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 800310a:	e003      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      break;
 8003110:	e000      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003124:	7bfb      	ldrb	r3, [r7, #15]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a2f      	ldr	r2, [pc, #188]	@ (8003200 <TIM_Base_SetConfig+0xd0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00b      	beq.n	8003160 <TIM_Base_SetConfig+0x30>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314e:	d007      	beq.n	8003160 <TIM_Base_SetConfig+0x30>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a2c      	ldr	r2, [pc, #176]	@ (8003204 <TIM_Base_SetConfig+0xd4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d003      	beq.n	8003160 <TIM_Base_SetConfig+0x30>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a2b      	ldr	r2, [pc, #172]	@ (8003208 <TIM_Base_SetConfig+0xd8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d108      	bne.n	8003172 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a22      	ldr	r2, [pc, #136]	@ (8003200 <TIM_Base_SetConfig+0xd0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00b      	beq.n	8003192 <TIM_Base_SetConfig+0x62>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003180:	d007      	beq.n	8003192 <TIM_Base_SetConfig+0x62>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1f      	ldr	r2, [pc, #124]	@ (8003204 <TIM_Base_SetConfig+0xd4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d003      	beq.n	8003192 <TIM_Base_SetConfig+0x62>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1e      	ldr	r2, [pc, #120]	@ (8003208 <TIM_Base_SetConfig+0xd8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d108      	bne.n	80031a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003200 <TIM_Base_SetConfig+0xd0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d103      	bne.n	80031d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f023 0201 	bic.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	611a      	str	r2, [r3, #16]
  }
}
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40000400 	.word	0x40000400
 8003208:	40000800 	.word	0x40000800

0800320c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f023 0201 	bic.w	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f023 030a 	bic.w	r3, r3, #10
 8003248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	621a      	str	r2, [r3, #32]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	f023 0210 	bic.w	r2, r3, #16
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	031b      	lsls	r3, r3, #12
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	621a      	str	r2, [r3, #32]
}
 80032bc:	bf00      	nop
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f043 0307 	orr.w	r3, r3, #7
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	609a      	str	r2, [r3, #8]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b087      	sub	sp, #28
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003314:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	021a      	lsls	r2, r3, #8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	431a      	orrs	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4313      	orrs	r3, r2
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	609a      	str	r2, [r3, #8]
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800334c:	2302      	movs	r3, #2
 800334e:	e046      	b.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a16      	ldr	r2, [pc, #88]	@ (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00e      	beq.n	80033b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800339c:	d009      	beq.n	80033b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a12      	ldr	r2, [pc, #72]	@ (80033ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d004      	beq.n	80033b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a10      	ldr	r2, [pc, #64]	@ (80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d10c      	bne.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800

080033f4 <siprintf>:
 80033f4:	b40e      	push	{r1, r2, r3}
 80033f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80033fa:	b510      	push	{r4, lr}
 80033fc:	2400      	movs	r4, #0
 80033fe:	b09d      	sub	sp, #116	@ 0x74
 8003400:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003402:	9002      	str	r0, [sp, #8]
 8003404:	9006      	str	r0, [sp, #24]
 8003406:	9107      	str	r1, [sp, #28]
 8003408:	9104      	str	r1, [sp, #16]
 800340a:	4809      	ldr	r0, [pc, #36]	@ (8003430 <siprintf+0x3c>)
 800340c:	4909      	ldr	r1, [pc, #36]	@ (8003434 <siprintf+0x40>)
 800340e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003412:	9105      	str	r1, [sp, #20]
 8003414:	6800      	ldr	r0, [r0, #0]
 8003416:	a902      	add	r1, sp, #8
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800341c:	f000 f992 	bl	8003744 <_svfiprintf_r>
 8003420:	9b02      	ldr	r3, [sp, #8]
 8003422:	701c      	strb	r4, [r3, #0]
 8003424:	b01d      	add	sp, #116	@ 0x74
 8003426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800342a:	b003      	add	sp, #12
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	2000001c 	.word	0x2000001c
 8003434:	ffff0208 	.word	0xffff0208

08003438 <memset>:
 8003438:	4603      	mov	r3, r0
 800343a:	4402      	add	r2, r0
 800343c:	4293      	cmp	r3, r2
 800343e:	d100      	bne.n	8003442 <memset+0xa>
 8003440:	4770      	bx	lr
 8003442:	f803 1b01 	strb.w	r1, [r3], #1
 8003446:	e7f9      	b.n	800343c <memset+0x4>

08003448 <__errno>:
 8003448:	4b01      	ldr	r3, [pc, #4]	@ (8003450 <__errno+0x8>)
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	2000001c 	.word	0x2000001c

08003454 <__libc_init_array>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	2600      	movs	r6, #0
 8003458:	4d0c      	ldr	r5, [pc, #48]	@ (800348c <__libc_init_array+0x38>)
 800345a:	4c0d      	ldr	r4, [pc, #52]	@ (8003490 <__libc_init_array+0x3c>)
 800345c:	1b64      	subs	r4, r4, r5
 800345e:	10a4      	asrs	r4, r4, #2
 8003460:	42a6      	cmp	r6, r4
 8003462:	d109      	bne.n	8003478 <__libc_init_array+0x24>
 8003464:	f000 fc76 	bl	8003d54 <_init>
 8003468:	2600      	movs	r6, #0
 800346a:	4d0a      	ldr	r5, [pc, #40]	@ (8003494 <__libc_init_array+0x40>)
 800346c:	4c0a      	ldr	r4, [pc, #40]	@ (8003498 <__libc_init_array+0x44>)
 800346e:	1b64      	subs	r4, r4, r5
 8003470:	10a4      	asrs	r4, r4, #2
 8003472:	42a6      	cmp	r6, r4
 8003474:	d105      	bne.n	8003482 <__libc_init_array+0x2e>
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	f855 3b04 	ldr.w	r3, [r5], #4
 800347c:	4798      	blx	r3
 800347e:	3601      	adds	r6, #1
 8003480:	e7ee      	b.n	8003460 <__libc_init_array+0xc>
 8003482:	f855 3b04 	ldr.w	r3, [r5], #4
 8003486:	4798      	blx	r3
 8003488:	3601      	adds	r6, #1
 800348a:	e7f2      	b.n	8003472 <__libc_init_array+0x1e>
 800348c:	08005e88 	.word	0x08005e88
 8003490:	08005e88 	.word	0x08005e88
 8003494:	08005e88 	.word	0x08005e88
 8003498:	08005e8c 	.word	0x08005e8c

0800349c <__retarget_lock_acquire_recursive>:
 800349c:	4770      	bx	lr

0800349e <__retarget_lock_release_recursive>:
 800349e:	4770      	bx	lr

080034a0 <_free_r>:
 80034a0:	b538      	push	{r3, r4, r5, lr}
 80034a2:	4605      	mov	r5, r0
 80034a4:	2900      	cmp	r1, #0
 80034a6:	d040      	beq.n	800352a <_free_r+0x8a>
 80034a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034ac:	1f0c      	subs	r4, r1, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bfb8      	it	lt
 80034b2:	18e4      	addlt	r4, r4, r3
 80034b4:	f000 f8de 	bl	8003674 <__malloc_lock>
 80034b8:	4a1c      	ldr	r2, [pc, #112]	@ (800352c <_free_r+0x8c>)
 80034ba:	6813      	ldr	r3, [r2, #0]
 80034bc:	b933      	cbnz	r3, 80034cc <_free_r+0x2c>
 80034be:	6063      	str	r3, [r4, #4]
 80034c0:	6014      	str	r4, [r2, #0]
 80034c2:	4628      	mov	r0, r5
 80034c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034c8:	f000 b8da 	b.w	8003680 <__malloc_unlock>
 80034cc:	42a3      	cmp	r3, r4
 80034ce:	d908      	bls.n	80034e2 <_free_r+0x42>
 80034d0:	6820      	ldr	r0, [r4, #0]
 80034d2:	1821      	adds	r1, r4, r0
 80034d4:	428b      	cmp	r3, r1
 80034d6:	bf01      	itttt	eq
 80034d8:	6819      	ldreq	r1, [r3, #0]
 80034da:	685b      	ldreq	r3, [r3, #4]
 80034dc:	1809      	addeq	r1, r1, r0
 80034de:	6021      	streq	r1, [r4, #0]
 80034e0:	e7ed      	b.n	80034be <_free_r+0x1e>
 80034e2:	461a      	mov	r2, r3
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	b10b      	cbz	r3, 80034ec <_free_r+0x4c>
 80034e8:	42a3      	cmp	r3, r4
 80034ea:	d9fa      	bls.n	80034e2 <_free_r+0x42>
 80034ec:	6811      	ldr	r1, [r2, #0]
 80034ee:	1850      	adds	r0, r2, r1
 80034f0:	42a0      	cmp	r0, r4
 80034f2:	d10b      	bne.n	800350c <_free_r+0x6c>
 80034f4:	6820      	ldr	r0, [r4, #0]
 80034f6:	4401      	add	r1, r0
 80034f8:	1850      	adds	r0, r2, r1
 80034fa:	4283      	cmp	r3, r0
 80034fc:	6011      	str	r1, [r2, #0]
 80034fe:	d1e0      	bne.n	80034c2 <_free_r+0x22>
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4408      	add	r0, r1
 8003506:	6010      	str	r0, [r2, #0]
 8003508:	6053      	str	r3, [r2, #4]
 800350a:	e7da      	b.n	80034c2 <_free_r+0x22>
 800350c:	d902      	bls.n	8003514 <_free_r+0x74>
 800350e:	230c      	movs	r3, #12
 8003510:	602b      	str	r3, [r5, #0]
 8003512:	e7d6      	b.n	80034c2 <_free_r+0x22>
 8003514:	6820      	ldr	r0, [r4, #0]
 8003516:	1821      	adds	r1, r4, r0
 8003518:	428b      	cmp	r3, r1
 800351a:	bf01      	itttt	eq
 800351c:	6819      	ldreq	r1, [r3, #0]
 800351e:	685b      	ldreq	r3, [r3, #4]
 8003520:	1809      	addeq	r1, r1, r0
 8003522:	6021      	streq	r1, [r4, #0]
 8003524:	6063      	str	r3, [r4, #4]
 8003526:	6054      	str	r4, [r2, #4]
 8003528:	e7cb      	b.n	80034c2 <_free_r+0x22>
 800352a:	bd38      	pop	{r3, r4, r5, pc}
 800352c:	20000698 	.word	0x20000698

08003530 <sbrk_aligned>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4e0f      	ldr	r6, [pc, #60]	@ (8003570 <sbrk_aligned+0x40>)
 8003534:	460c      	mov	r4, r1
 8003536:	6831      	ldr	r1, [r6, #0]
 8003538:	4605      	mov	r5, r0
 800353a:	b911      	cbnz	r1, 8003542 <sbrk_aligned+0x12>
 800353c:	f000 fba8 	bl	8003c90 <_sbrk_r>
 8003540:	6030      	str	r0, [r6, #0]
 8003542:	4621      	mov	r1, r4
 8003544:	4628      	mov	r0, r5
 8003546:	f000 fba3 	bl	8003c90 <_sbrk_r>
 800354a:	1c43      	adds	r3, r0, #1
 800354c:	d103      	bne.n	8003556 <sbrk_aligned+0x26>
 800354e:	f04f 34ff 	mov.w	r4, #4294967295
 8003552:	4620      	mov	r0, r4
 8003554:	bd70      	pop	{r4, r5, r6, pc}
 8003556:	1cc4      	adds	r4, r0, #3
 8003558:	f024 0403 	bic.w	r4, r4, #3
 800355c:	42a0      	cmp	r0, r4
 800355e:	d0f8      	beq.n	8003552 <sbrk_aligned+0x22>
 8003560:	1a21      	subs	r1, r4, r0
 8003562:	4628      	mov	r0, r5
 8003564:	f000 fb94 	bl	8003c90 <_sbrk_r>
 8003568:	3001      	adds	r0, #1
 800356a:	d1f2      	bne.n	8003552 <sbrk_aligned+0x22>
 800356c:	e7ef      	b.n	800354e <sbrk_aligned+0x1e>
 800356e:	bf00      	nop
 8003570:	20000694 	.word	0x20000694

08003574 <_malloc_r>:
 8003574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003578:	1ccd      	adds	r5, r1, #3
 800357a:	f025 0503 	bic.w	r5, r5, #3
 800357e:	3508      	adds	r5, #8
 8003580:	2d0c      	cmp	r5, #12
 8003582:	bf38      	it	cc
 8003584:	250c      	movcc	r5, #12
 8003586:	2d00      	cmp	r5, #0
 8003588:	4606      	mov	r6, r0
 800358a:	db01      	blt.n	8003590 <_malloc_r+0x1c>
 800358c:	42a9      	cmp	r1, r5
 800358e:	d904      	bls.n	800359a <_malloc_r+0x26>
 8003590:	230c      	movs	r3, #12
 8003592:	6033      	str	r3, [r6, #0]
 8003594:	2000      	movs	r0, #0
 8003596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800359a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003670 <_malloc_r+0xfc>
 800359e:	f000 f869 	bl	8003674 <__malloc_lock>
 80035a2:	f8d8 3000 	ldr.w	r3, [r8]
 80035a6:	461c      	mov	r4, r3
 80035a8:	bb44      	cbnz	r4, 80035fc <_malloc_r+0x88>
 80035aa:	4629      	mov	r1, r5
 80035ac:	4630      	mov	r0, r6
 80035ae:	f7ff ffbf 	bl	8003530 <sbrk_aligned>
 80035b2:	1c43      	adds	r3, r0, #1
 80035b4:	4604      	mov	r4, r0
 80035b6:	d158      	bne.n	800366a <_malloc_r+0xf6>
 80035b8:	f8d8 4000 	ldr.w	r4, [r8]
 80035bc:	4627      	mov	r7, r4
 80035be:	2f00      	cmp	r7, #0
 80035c0:	d143      	bne.n	800364a <_malloc_r+0xd6>
 80035c2:	2c00      	cmp	r4, #0
 80035c4:	d04b      	beq.n	800365e <_malloc_r+0xea>
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	4639      	mov	r1, r7
 80035ca:	4630      	mov	r0, r6
 80035cc:	eb04 0903 	add.w	r9, r4, r3
 80035d0:	f000 fb5e 	bl	8003c90 <_sbrk_r>
 80035d4:	4581      	cmp	r9, r0
 80035d6:	d142      	bne.n	800365e <_malloc_r+0xea>
 80035d8:	6821      	ldr	r1, [r4, #0]
 80035da:	4630      	mov	r0, r6
 80035dc:	1a6d      	subs	r5, r5, r1
 80035de:	4629      	mov	r1, r5
 80035e0:	f7ff ffa6 	bl	8003530 <sbrk_aligned>
 80035e4:	3001      	adds	r0, #1
 80035e6:	d03a      	beq.n	800365e <_malloc_r+0xea>
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	442b      	add	r3, r5
 80035ec:	6023      	str	r3, [r4, #0]
 80035ee:	f8d8 3000 	ldr.w	r3, [r8]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	bb62      	cbnz	r2, 8003650 <_malloc_r+0xdc>
 80035f6:	f8c8 7000 	str.w	r7, [r8]
 80035fa:	e00f      	b.n	800361c <_malloc_r+0xa8>
 80035fc:	6822      	ldr	r2, [r4, #0]
 80035fe:	1b52      	subs	r2, r2, r5
 8003600:	d420      	bmi.n	8003644 <_malloc_r+0xd0>
 8003602:	2a0b      	cmp	r2, #11
 8003604:	d917      	bls.n	8003636 <_malloc_r+0xc2>
 8003606:	1961      	adds	r1, r4, r5
 8003608:	42a3      	cmp	r3, r4
 800360a:	6025      	str	r5, [r4, #0]
 800360c:	bf18      	it	ne
 800360e:	6059      	strne	r1, [r3, #4]
 8003610:	6863      	ldr	r3, [r4, #4]
 8003612:	bf08      	it	eq
 8003614:	f8c8 1000 	streq.w	r1, [r8]
 8003618:	5162      	str	r2, [r4, r5]
 800361a:	604b      	str	r3, [r1, #4]
 800361c:	4630      	mov	r0, r6
 800361e:	f000 f82f 	bl	8003680 <__malloc_unlock>
 8003622:	f104 000b 	add.w	r0, r4, #11
 8003626:	1d23      	adds	r3, r4, #4
 8003628:	f020 0007 	bic.w	r0, r0, #7
 800362c:	1ac2      	subs	r2, r0, r3
 800362e:	bf1c      	itt	ne
 8003630:	1a1b      	subne	r3, r3, r0
 8003632:	50a3      	strne	r3, [r4, r2]
 8003634:	e7af      	b.n	8003596 <_malloc_r+0x22>
 8003636:	6862      	ldr	r2, [r4, #4]
 8003638:	42a3      	cmp	r3, r4
 800363a:	bf0c      	ite	eq
 800363c:	f8c8 2000 	streq.w	r2, [r8]
 8003640:	605a      	strne	r2, [r3, #4]
 8003642:	e7eb      	b.n	800361c <_malloc_r+0xa8>
 8003644:	4623      	mov	r3, r4
 8003646:	6864      	ldr	r4, [r4, #4]
 8003648:	e7ae      	b.n	80035a8 <_malloc_r+0x34>
 800364a:	463c      	mov	r4, r7
 800364c:	687f      	ldr	r7, [r7, #4]
 800364e:	e7b6      	b.n	80035be <_malloc_r+0x4a>
 8003650:	461a      	mov	r2, r3
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	42a3      	cmp	r3, r4
 8003656:	d1fb      	bne.n	8003650 <_malloc_r+0xdc>
 8003658:	2300      	movs	r3, #0
 800365a:	6053      	str	r3, [r2, #4]
 800365c:	e7de      	b.n	800361c <_malloc_r+0xa8>
 800365e:	230c      	movs	r3, #12
 8003660:	4630      	mov	r0, r6
 8003662:	6033      	str	r3, [r6, #0]
 8003664:	f000 f80c 	bl	8003680 <__malloc_unlock>
 8003668:	e794      	b.n	8003594 <_malloc_r+0x20>
 800366a:	6005      	str	r5, [r0, #0]
 800366c:	e7d6      	b.n	800361c <_malloc_r+0xa8>
 800366e:	bf00      	nop
 8003670:	20000698 	.word	0x20000698

08003674 <__malloc_lock>:
 8003674:	4801      	ldr	r0, [pc, #4]	@ (800367c <__malloc_lock+0x8>)
 8003676:	f7ff bf11 	b.w	800349c <__retarget_lock_acquire_recursive>
 800367a:	bf00      	nop
 800367c:	20000690 	.word	0x20000690

08003680 <__malloc_unlock>:
 8003680:	4801      	ldr	r0, [pc, #4]	@ (8003688 <__malloc_unlock+0x8>)
 8003682:	f7ff bf0c 	b.w	800349e <__retarget_lock_release_recursive>
 8003686:	bf00      	nop
 8003688:	20000690 	.word	0x20000690

0800368c <__ssputs_r>:
 800368c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003690:	461f      	mov	r7, r3
 8003692:	688e      	ldr	r6, [r1, #8]
 8003694:	4682      	mov	sl, r0
 8003696:	42be      	cmp	r6, r7
 8003698:	460c      	mov	r4, r1
 800369a:	4690      	mov	r8, r2
 800369c:	680b      	ldr	r3, [r1, #0]
 800369e:	d82d      	bhi.n	80036fc <__ssputs_r+0x70>
 80036a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80036a8:	d026      	beq.n	80036f8 <__ssputs_r+0x6c>
 80036aa:	6965      	ldr	r5, [r4, #20]
 80036ac:	6909      	ldr	r1, [r1, #16]
 80036ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036b2:	eba3 0901 	sub.w	r9, r3, r1
 80036b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036ba:	1c7b      	adds	r3, r7, #1
 80036bc:	444b      	add	r3, r9
 80036be:	106d      	asrs	r5, r5, #1
 80036c0:	429d      	cmp	r5, r3
 80036c2:	bf38      	it	cc
 80036c4:	461d      	movcc	r5, r3
 80036c6:	0553      	lsls	r3, r2, #21
 80036c8:	d527      	bpl.n	800371a <__ssputs_r+0x8e>
 80036ca:	4629      	mov	r1, r5
 80036cc:	f7ff ff52 	bl	8003574 <_malloc_r>
 80036d0:	4606      	mov	r6, r0
 80036d2:	b360      	cbz	r0, 800372e <__ssputs_r+0xa2>
 80036d4:	464a      	mov	r2, r9
 80036d6:	6921      	ldr	r1, [r4, #16]
 80036d8:	f000 faf8 	bl	8003ccc <memcpy>
 80036dc:	89a3      	ldrh	r3, [r4, #12]
 80036de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80036e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036e6:	81a3      	strh	r3, [r4, #12]
 80036e8:	6126      	str	r6, [r4, #16]
 80036ea:	444e      	add	r6, r9
 80036ec:	6026      	str	r6, [r4, #0]
 80036ee:	463e      	mov	r6, r7
 80036f0:	6165      	str	r5, [r4, #20]
 80036f2:	eba5 0509 	sub.w	r5, r5, r9
 80036f6:	60a5      	str	r5, [r4, #8]
 80036f8:	42be      	cmp	r6, r7
 80036fa:	d900      	bls.n	80036fe <__ssputs_r+0x72>
 80036fc:	463e      	mov	r6, r7
 80036fe:	4632      	mov	r2, r6
 8003700:	4641      	mov	r1, r8
 8003702:	6820      	ldr	r0, [r4, #0]
 8003704:	f000 faaa 	bl	8003c5c <memmove>
 8003708:	2000      	movs	r0, #0
 800370a:	68a3      	ldr	r3, [r4, #8]
 800370c:	1b9b      	subs	r3, r3, r6
 800370e:	60a3      	str	r3, [r4, #8]
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	4433      	add	r3, r6
 8003714:	6023      	str	r3, [r4, #0]
 8003716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371a:	462a      	mov	r2, r5
 800371c:	f000 fae4 	bl	8003ce8 <_realloc_r>
 8003720:	4606      	mov	r6, r0
 8003722:	2800      	cmp	r0, #0
 8003724:	d1e0      	bne.n	80036e8 <__ssputs_r+0x5c>
 8003726:	4650      	mov	r0, sl
 8003728:	6921      	ldr	r1, [r4, #16]
 800372a:	f7ff feb9 	bl	80034a0 <_free_r>
 800372e:	230c      	movs	r3, #12
 8003730:	f8ca 3000 	str.w	r3, [sl]
 8003734:	89a3      	ldrh	r3, [r4, #12]
 8003736:	f04f 30ff 	mov.w	r0, #4294967295
 800373a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800373e:	81a3      	strh	r3, [r4, #12]
 8003740:	e7e9      	b.n	8003716 <__ssputs_r+0x8a>
	...

08003744 <_svfiprintf_r>:
 8003744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003748:	4698      	mov	r8, r3
 800374a:	898b      	ldrh	r3, [r1, #12]
 800374c:	4607      	mov	r7, r0
 800374e:	061b      	lsls	r3, r3, #24
 8003750:	460d      	mov	r5, r1
 8003752:	4614      	mov	r4, r2
 8003754:	b09d      	sub	sp, #116	@ 0x74
 8003756:	d510      	bpl.n	800377a <_svfiprintf_r+0x36>
 8003758:	690b      	ldr	r3, [r1, #16]
 800375a:	b973      	cbnz	r3, 800377a <_svfiprintf_r+0x36>
 800375c:	2140      	movs	r1, #64	@ 0x40
 800375e:	f7ff ff09 	bl	8003574 <_malloc_r>
 8003762:	6028      	str	r0, [r5, #0]
 8003764:	6128      	str	r0, [r5, #16]
 8003766:	b930      	cbnz	r0, 8003776 <_svfiprintf_r+0x32>
 8003768:	230c      	movs	r3, #12
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	b01d      	add	sp, #116	@ 0x74
 8003772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003776:	2340      	movs	r3, #64	@ 0x40
 8003778:	616b      	str	r3, [r5, #20]
 800377a:	2300      	movs	r3, #0
 800377c:	9309      	str	r3, [sp, #36]	@ 0x24
 800377e:	2320      	movs	r3, #32
 8003780:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003784:	2330      	movs	r3, #48	@ 0x30
 8003786:	f04f 0901 	mov.w	r9, #1
 800378a:	f8cd 800c 	str.w	r8, [sp, #12]
 800378e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003928 <_svfiprintf_r+0x1e4>
 8003792:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003796:	4623      	mov	r3, r4
 8003798:	469a      	mov	sl, r3
 800379a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800379e:	b10a      	cbz	r2, 80037a4 <_svfiprintf_r+0x60>
 80037a0:	2a25      	cmp	r2, #37	@ 0x25
 80037a2:	d1f9      	bne.n	8003798 <_svfiprintf_r+0x54>
 80037a4:	ebba 0b04 	subs.w	fp, sl, r4
 80037a8:	d00b      	beq.n	80037c2 <_svfiprintf_r+0x7e>
 80037aa:	465b      	mov	r3, fp
 80037ac:	4622      	mov	r2, r4
 80037ae:	4629      	mov	r1, r5
 80037b0:	4638      	mov	r0, r7
 80037b2:	f7ff ff6b 	bl	800368c <__ssputs_r>
 80037b6:	3001      	adds	r0, #1
 80037b8:	f000 80a7 	beq.w	800390a <_svfiprintf_r+0x1c6>
 80037bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037be:	445a      	add	r2, fp
 80037c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80037c2:	f89a 3000 	ldrb.w	r3, [sl]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 809f 	beq.w	800390a <_svfiprintf_r+0x1c6>
 80037cc:	2300      	movs	r3, #0
 80037ce:	f04f 32ff 	mov.w	r2, #4294967295
 80037d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037d6:	f10a 0a01 	add.w	sl, sl, #1
 80037da:	9304      	str	r3, [sp, #16]
 80037dc:	9307      	str	r3, [sp, #28]
 80037de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80037e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80037e4:	4654      	mov	r4, sl
 80037e6:	2205      	movs	r2, #5
 80037e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ec:	484e      	ldr	r0, [pc, #312]	@ (8003928 <_svfiprintf_r+0x1e4>)
 80037ee:	f000 fa5f 	bl	8003cb0 <memchr>
 80037f2:	9a04      	ldr	r2, [sp, #16]
 80037f4:	b9d8      	cbnz	r0, 800382e <_svfiprintf_r+0xea>
 80037f6:	06d0      	lsls	r0, r2, #27
 80037f8:	bf44      	itt	mi
 80037fa:	2320      	movmi	r3, #32
 80037fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003800:	0711      	lsls	r1, r2, #28
 8003802:	bf44      	itt	mi
 8003804:	232b      	movmi	r3, #43	@ 0x2b
 8003806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800380a:	f89a 3000 	ldrb.w	r3, [sl]
 800380e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003810:	d015      	beq.n	800383e <_svfiprintf_r+0xfa>
 8003812:	4654      	mov	r4, sl
 8003814:	2000      	movs	r0, #0
 8003816:	f04f 0c0a 	mov.w	ip, #10
 800381a:	9a07      	ldr	r2, [sp, #28]
 800381c:	4621      	mov	r1, r4
 800381e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003822:	3b30      	subs	r3, #48	@ 0x30
 8003824:	2b09      	cmp	r3, #9
 8003826:	d94b      	bls.n	80038c0 <_svfiprintf_r+0x17c>
 8003828:	b1b0      	cbz	r0, 8003858 <_svfiprintf_r+0x114>
 800382a:	9207      	str	r2, [sp, #28]
 800382c:	e014      	b.n	8003858 <_svfiprintf_r+0x114>
 800382e:	eba0 0308 	sub.w	r3, r0, r8
 8003832:	fa09 f303 	lsl.w	r3, r9, r3
 8003836:	4313      	orrs	r3, r2
 8003838:	46a2      	mov	sl, r4
 800383a:	9304      	str	r3, [sp, #16]
 800383c:	e7d2      	b.n	80037e4 <_svfiprintf_r+0xa0>
 800383e:	9b03      	ldr	r3, [sp, #12]
 8003840:	1d19      	adds	r1, r3, #4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	9103      	str	r1, [sp, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	bfbb      	ittet	lt
 800384a:	425b      	neglt	r3, r3
 800384c:	f042 0202 	orrlt.w	r2, r2, #2
 8003850:	9307      	strge	r3, [sp, #28]
 8003852:	9307      	strlt	r3, [sp, #28]
 8003854:	bfb8      	it	lt
 8003856:	9204      	strlt	r2, [sp, #16]
 8003858:	7823      	ldrb	r3, [r4, #0]
 800385a:	2b2e      	cmp	r3, #46	@ 0x2e
 800385c:	d10a      	bne.n	8003874 <_svfiprintf_r+0x130>
 800385e:	7863      	ldrb	r3, [r4, #1]
 8003860:	2b2a      	cmp	r3, #42	@ 0x2a
 8003862:	d132      	bne.n	80038ca <_svfiprintf_r+0x186>
 8003864:	9b03      	ldr	r3, [sp, #12]
 8003866:	3402      	adds	r4, #2
 8003868:	1d1a      	adds	r2, r3, #4
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	9203      	str	r2, [sp, #12]
 800386e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003872:	9305      	str	r3, [sp, #20]
 8003874:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800392c <_svfiprintf_r+0x1e8>
 8003878:	2203      	movs	r2, #3
 800387a:	4650      	mov	r0, sl
 800387c:	7821      	ldrb	r1, [r4, #0]
 800387e:	f000 fa17 	bl	8003cb0 <memchr>
 8003882:	b138      	cbz	r0, 8003894 <_svfiprintf_r+0x150>
 8003884:	2240      	movs	r2, #64	@ 0x40
 8003886:	9b04      	ldr	r3, [sp, #16]
 8003888:	eba0 000a 	sub.w	r0, r0, sl
 800388c:	4082      	lsls	r2, r0
 800388e:	4313      	orrs	r3, r2
 8003890:	3401      	adds	r4, #1
 8003892:	9304      	str	r3, [sp, #16]
 8003894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003898:	2206      	movs	r2, #6
 800389a:	4825      	ldr	r0, [pc, #148]	@ (8003930 <_svfiprintf_r+0x1ec>)
 800389c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038a0:	f000 fa06 	bl	8003cb0 <memchr>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d036      	beq.n	8003916 <_svfiprintf_r+0x1d2>
 80038a8:	4b22      	ldr	r3, [pc, #136]	@ (8003934 <_svfiprintf_r+0x1f0>)
 80038aa:	bb1b      	cbnz	r3, 80038f4 <_svfiprintf_r+0x1b0>
 80038ac:	9b03      	ldr	r3, [sp, #12]
 80038ae:	3307      	adds	r3, #7
 80038b0:	f023 0307 	bic.w	r3, r3, #7
 80038b4:	3308      	adds	r3, #8
 80038b6:	9303      	str	r3, [sp, #12]
 80038b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038ba:	4433      	add	r3, r6
 80038bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80038be:	e76a      	b.n	8003796 <_svfiprintf_r+0x52>
 80038c0:	460c      	mov	r4, r1
 80038c2:	2001      	movs	r0, #1
 80038c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80038c8:	e7a8      	b.n	800381c <_svfiprintf_r+0xd8>
 80038ca:	2300      	movs	r3, #0
 80038cc:	f04f 0c0a 	mov.w	ip, #10
 80038d0:	4619      	mov	r1, r3
 80038d2:	3401      	adds	r4, #1
 80038d4:	9305      	str	r3, [sp, #20]
 80038d6:	4620      	mov	r0, r4
 80038d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038dc:	3a30      	subs	r2, #48	@ 0x30
 80038de:	2a09      	cmp	r2, #9
 80038e0:	d903      	bls.n	80038ea <_svfiprintf_r+0x1a6>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0c6      	beq.n	8003874 <_svfiprintf_r+0x130>
 80038e6:	9105      	str	r1, [sp, #20]
 80038e8:	e7c4      	b.n	8003874 <_svfiprintf_r+0x130>
 80038ea:	4604      	mov	r4, r0
 80038ec:	2301      	movs	r3, #1
 80038ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80038f2:	e7f0      	b.n	80038d6 <_svfiprintf_r+0x192>
 80038f4:	ab03      	add	r3, sp, #12
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	462a      	mov	r2, r5
 80038fa:	4638      	mov	r0, r7
 80038fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003938 <_svfiprintf_r+0x1f4>)
 80038fe:	a904      	add	r1, sp, #16
 8003900:	f3af 8000 	nop.w
 8003904:	1c42      	adds	r2, r0, #1
 8003906:	4606      	mov	r6, r0
 8003908:	d1d6      	bne.n	80038b8 <_svfiprintf_r+0x174>
 800390a:	89ab      	ldrh	r3, [r5, #12]
 800390c:	065b      	lsls	r3, r3, #25
 800390e:	f53f af2d 	bmi.w	800376c <_svfiprintf_r+0x28>
 8003912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003914:	e72c      	b.n	8003770 <_svfiprintf_r+0x2c>
 8003916:	ab03      	add	r3, sp, #12
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	462a      	mov	r2, r5
 800391c:	4638      	mov	r0, r7
 800391e:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <_svfiprintf_r+0x1f4>)
 8003920:	a904      	add	r1, sp, #16
 8003922:	f000 f87d 	bl	8003a20 <_printf_i>
 8003926:	e7ed      	b.n	8003904 <_svfiprintf_r+0x1c0>
 8003928:	08005e52 	.word	0x08005e52
 800392c:	08005e58 	.word	0x08005e58
 8003930:	08005e5c 	.word	0x08005e5c
 8003934:	00000000 	.word	0x00000000
 8003938:	0800368d 	.word	0x0800368d

0800393c <_printf_common>:
 800393c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003940:	4616      	mov	r6, r2
 8003942:	4698      	mov	r8, r3
 8003944:	688a      	ldr	r2, [r1, #8]
 8003946:	690b      	ldr	r3, [r1, #16]
 8003948:	4607      	mov	r7, r0
 800394a:	4293      	cmp	r3, r2
 800394c:	bfb8      	it	lt
 800394e:	4613      	movlt	r3, r2
 8003950:	6033      	str	r3, [r6, #0]
 8003952:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003956:	460c      	mov	r4, r1
 8003958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800395c:	b10a      	cbz	r2, 8003962 <_printf_common+0x26>
 800395e:	3301      	adds	r3, #1
 8003960:	6033      	str	r3, [r6, #0]
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	0699      	lsls	r1, r3, #26
 8003966:	bf42      	ittt	mi
 8003968:	6833      	ldrmi	r3, [r6, #0]
 800396a:	3302      	addmi	r3, #2
 800396c:	6033      	strmi	r3, [r6, #0]
 800396e:	6825      	ldr	r5, [r4, #0]
 8003970:	f015 0506 	ands.w	r5, r5, #6
 8003974:	d106      	bne.n	8003984 <_printf_common+0x48>
 8003976:	f104 0a19 	add.w	sl, r4, #25
 800397a:	68e3      	ldr	r3, [r4, #12]
 800397c:	6832      	ldr	r2, [r6, #0]
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	42ab      	cmp	r3, r5
 8003982:	dc2b      	bgt.n	80039dc <_printf_common+0xa0>
 8003984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003988:	6822      	ldr	r2, [r4, #0]
 800398a:	3b00      	subs	r3, #0
 800398c:	bf18      	it	ne
 800398e:	2301      	movne	r3, #1
 8003990:	0692      	lsls	r2, r2, #26
 8003992:	d430      	bmi.n	80039f6 <_printf_common+0xba>
 8003994:	4641      	mov	r1, r8
 8003996:	4638      	mov	r0, r7
 8003998:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800399c:	47c8      	blx	r9
 800399e:	3001      	adds	r0, #1
 80039a0:	d023      	beq.n	80039ea <_printf_common+0xae>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	6922      	ldr	r2, [r4, #16]
 80039a6:	f003 0306 	and.w	r3, r3, #6
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	bf14      	ite	ne
 80039ae:	2500      	movne	r5, #0
 80039b0:	6833      	ldreq	r3, [r6, #0]
 80039b2:	f04f 0600 	mov.w	r6, #0
 80039b6:	bf08      	it	eq
 80039b8:	68e5      	ldreq	r5, [r4, #12]
 80039ba:	f104 041a 	add.w	r4, r4, #26
 80039be:	bf08      	it	eq
 80039c0:	1aed      	subeq	r5, r5, r3
 80039c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80039c6:	bf08      	it	eq
 80039c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039cc:	4293      	cmp	r3, r2
 80039ce:	bfc4      	itt	gt
 80039d0:	1a9b      	subgt	r3, r3, r2
 80039d2:	18ed      	addgt	r5, r5, r3
 80039d4:	42b5      	cmp	r5, r6
 80039d6:	d11a      	bne.n	8003a0e <_printf_common+0xd2>
 80039d8:	2000      	movs	r0, #0
 80039da:	e008      	b.n	80039ee <_printf_common+0xb2>
 80039dc:	2301      	movs	r3, #1
 80039de:	4652      	mov	r2, sl
 80039e0:	4641      	mov	r1, r8
 80039e2:	4638      	mov	r0, r7
 80039e4:	47c8      	blx	r9
 80039e6:	3001      	adds	r0, #1
 80039e8:	d103      	bne.n	80039f2 <_printf_common+0xb6>
 80039ea:	f04f 30ff 	mov.w	r0, #4294967295
 80039ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f2:	3501      	adds	r5, #1
 80039f4:	e7c1      	b.n	800397a <_printf_common+0x3e>
 80039f6:	2030      	movs	r0, #48	@ 0x30
 80039f8:	18e1      	adds	r1, r4, r3
 80039fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a04:	4422      	add	r2, r4
 8003a06:	3302      	adds	r3, #2
 8003a08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a0c:	e7c2      	b.n	8003994 <_printf_common+0x58>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	4622      	mov	r2, r4
 8003a12:	4641      	mov	r1, r8
 8003a14:	4638      	mov	r0, r7
 8003a16:	47c8      	blx	r9
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d0e6      	beq.n	80039ea <_printf_common+0xae>
 8003a1c:	3601      	adds	r6, #1
 8003a1e:	e7d9      	b.n	80039d4 <_printf_common+0x98>

08003a20 <_printf_i>:
 8003a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a24:	7e0f      	ldrb	r7, [r1, #24]
 8003a26:	4691      	mov	r9, r2
 8003a28:	2f78      	cmp	r7, #120	@ 0x78
 8003a2a:	4680      	mov	r8, r0
 8003a2c:	460c      	mov	r4, r1
 8003a2e:	469a      	mov	sl, r3
 8003a30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a36:	d807      	bhi.n	8003a48 <_printf_i+0x28>
 8003a38:	2f62      	cmp	r7, #98	@ 0x62
 8003a3a:	d80a      	bhi.n	8003a52 <_printf_i+0x32>
 8003a3c:	2f00      	cmp	r7, #0
 8003a3e:	f000 80d1 	beq.w	8003be4 <_printf_i+0x1c4>
 8003a42:	2f58      	cmp	r7, #88	@ 0x58
 8003a44:	f000 80b8 	beq.w	8003bb8 <_printf_i+0x198>
 8003a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a50:	e03a      	b.n	8003ac8 <_printf_i+0xa8>
 8003a52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a56:	2b15      	cmp	r3, #21
 8003a58:	d8f6      	bhi.n	8003a48 <_printf_i+0x28>
 8003a5a:	a101      	add	r1, pc, #4	@ (adr r1, 8003a60 <_printf_i+0x40>)
 8003a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a60:	08003ab9 	.word	0x08003ab9
 8003a64:	08003acd 	.word	0x08003acd
 8003a68:	08003a49 	.word	0x08003a49
 8003a6c:	08003a49 	.word	0x08003a49
 8003a70:	08003a49 	.word	0x08003a49
 8003a74:	08003a49 	.word	0x08003a49
 8003a78:	08003acd 	.word	0x08003acd
 8003a7c:	08003a49 	.word	0x08003a49
 8003a80:	08003a49 	.word	0x08003a49
 8003a84:	08003a49 	.word	0x08003a49
 8003a88:	08003a49 	.word	0x08003a49
 8003a8c:	08003bcb 	.word	0x08003bcb
 8003a90:	08003af7 	.word	0x08003af7
 8003a94:	08003b85 	.word	0x08003b85
 8003a98:	08003a49 	.word	0x08003a49
 8003a9c:	08003a49 	.word	0x08003a49
 8003aa0:	08003bed 	.word	0x08003bed
 8003aa4:	08003a49 	.word	0x08003a49
 8003aa8:	08003af7 	.word	0x08003af7
 8003aac:	08003a49 	.word	0x08003a49
 8003ab0:	08003a49 	.word	0x08003a49
 8003ab4:	08003b8d 	.word	0x08003b8d
 8003ab8:	6833      	ldr	r3, [r6, #0]
 8003aba:	1d1a      	adds	r2, r3, #4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6032      	str	r2, [r6, #0]
 8003ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ac4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e09c      	b.n	8003c06 <_printf_i+0x1e6>
 8003acc:	6833      	ldr	r3, [r6, #0]
 8003ace:	6820      	ldr	r0, [r4, #0]
 8003ad0:	1d19      	adds	r1, r3, #4
 8003ad2:	6031      	str	r1, [r6, #0]
 8003ad4:	0606      	lsls	r6, r0, #24
 8003ad6:	d501      	bpl.n	8003adc <_printf_i+0xbc>
 8003ad8:	681d      	ldr	r5, [r3, #0]
 8003ada:	e003      	b.n	8003ae4 <_printf_i+0xc4>
 8003adc:	0645      	lsls	r5, r0, #25
 8003ade:	d5fb      	bpl.n	8003ad8 <_printf_i+0xb8>
 8003ae0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ae4:	2d00      	cmp	r5, #0
 8003ae6:	da03      	bge.n	8003af0 <_printf_i+0xd0>
 8003ae8:	232d      	movs	r3, #45	@ 0x2d
 8003aea:	426d      	negs	r5, r5
 8003aec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003af0:	230a      	movs	r3, #10
 8003af2:	4858      	ldr	r0, [pc, #352]	@ (8003c54 <_printf_i+0x234>)
 8003af4:	e011      	b.n	8003b1a <_printf_i+0xfa>
 8003af6:	6821      	ldr	r1, [r4, #0]
 8003af8:	6833      	ldr	r3, [r6, #0]
 8003afa:	0608      	lsls	r0, r1, #24
 8003afc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b00:	d402      	bmi.n	8003b08 <_printf_i+0xe8>
 8003b02:	0649      	lsls	r1, r1, #25
 8003b04:	bf48      	it	mi
 8003b06:	b2ad      	uxthmi	r5, r5
 8003b08:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b0a:	6033      	str	r3, [r6, #0]
 8003b0c:	bf14      	ite	ne
 8003b0e:	230a      	movne	r3, #10
 8003b10:	2308      	moveq	r3, #8
 8003b12:	4850      	ldr	r0, [pc, #320]	@ (8003c54 <_printf_i+0x234>)
 8003b14:	2100      	movs	r1, #0
 8003b16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b1a:	6866      	ldr	r6, [r4, #4]
 8003b1c:	2e00      	cmp	r6, #0
 8003b1e:	60a6      	str	r6, [r4, #8]
 8003b20:	db05      	blt.n	8003b2e <_printf_i+0x10e>
 8003b22:	6821      	ldr	r1, [r4, #0]
 8003b24:	432e      	orrs	r6, r5
 8003b26:	f021 0104 	bic.w	r1, r1, #4
 8003b2a:	6021      	str	r1, [r4, #0]
 8003b2c:	d04b      	beq.n	8003bc6 <_printf_i+0x1a6>
 8003b2e:	4616      	mov	r6, r2
 8003b30:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b34:	fb03 5711 	mls	r7, r3, r1, r5
 8003b38:	5dc7      	ldrb	r7, [r0, r7]
 8003b3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b3e:	462f      	mov	r7, r5
 8003b40:	42bb      	cmp	r3, r7
 8003b42:	460d      	mov	r5, r1
 8003b44:	d9f4      	bls.n	8003b30 <_printf_i+0x110>
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d10b      	bne.n	8003b62 <_printf_i+0x142>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	07df      	lsls	r7, r3, #31
 8003b4e:	d508      	bpl.n	8003b62 <_printf_i+0x142>
 8003b50:	6923      	ldr	r3, [r4, #16]
 8003b52:	6861      	ldr	r1, [r4, #4]
 8003b54:	4299      	cmp	r1, r3
 8003b56:	bfde      	ittt	le
 8003b58:	2330      	movle	r3, #48	@ 0x30
 8003b5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b62:	1b92      	subs	r2, r2, r6
 8003b64:	6122      	str	r2, [r4, #16]
 8003b66:	464b      	mov	r3, r9
 8003b68:	4621      	mov	r1, r4
 8003b6a:	4640      	mov	r0, r8
 8003b6c:	f8cd a000 	str.w	sl, [sp]
 8003b70:	aa03      	add	r2, sp, #12
 8003b72:	f7ff fee3 	bl	800393c <_printf_common>
 8003b76:	3001      	adds	r0, #1
 8003b78:	d14a      	bne.n	8003c10 <_printf_i+0x1f0>
 8003b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7e:	b004      	add	sp, #16
 8003b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	f043 0320 	orr.w	r3, r3, #32
 8003b8a:	6023      	str	r3, [r4, #0]
 8003b8c:	2778      	movs	r7, #120	@ 0x78
 8003b8e:	4832      	ldr	r0, [pc, #200]	@ (8003c58 <_printf_i+0x238>)
 8003b90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	6831      	ldr	r1, [r6, #0]
 8003b98:	061f      	lsls	r7, r3, #24
 8003b9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b9e:	d402      	bmi.n	8003ba6 <_printf_i+0x186>
 8003ba0:	065f      	lsls	r7, r3, #25
 8003ba2:	bf48      	it	mi
 8003ba4:	b2ad      	uxthmi	r5, r5
 8003ba6:	6031      	str	r1, [r6, #0]
 8003ba8:	07d9      	lsls	r1, r3, #31
 8003baa:	bf44      	itt	mi
 8003bac:	f043 0320 	orrmi.w	r3, r3, #32
 8003bb0:	6023      	strmi	r3, [r4, #0]
 8003bb2:	b11d      	cbz	r5, 8003bbc <_printf_i+0x19c>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	e7ad      	b.n	8003b14 <_printf_i+0xf4>
 8003bb8:	4826      	ldr	r0, [pc, #152]	@ (8003c54 <_printf_i+0x234>)
 8003bba:	e7e9      	b.n	8003b90 <_printf_i+0x170>
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	f023 0320 	bic.w	r3, r3, #32
 8003bc2:	6023      	str	r3, [r4, #0]
 8003bc4:	e7f6      	b.n	8003bb4 <_printf_i+0x194>
 8003bc6:	4616      	mov	r6, r2
 8003bc8:	e7bd      	b.n	8003b46 <_printf_i+0x126>
 8003bca:	6833      	ldr	r3, [r6, #0]
 8003bcc:	6825      	ldr	r5, [r4, #0]
 8003bce:	1d18      	adds	r0, r3, #4
 8003bd0:	6961      	ldr	r1, [r4, #20]
 8003bd2:	6030      	str	r0, [r6, #0]
 8003bd4:	062e      	lsls	r6, r5, #24
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	d501      	bpl.n	8003bde <_printf_i+0x1be>
 8003bda:	6019      	str	r1, [r3, #0]
 8003bdc:	e002      	b.n	8003be4 <_printf_i+0x1c4>
 8003bde:	0668      	lsls	r0, r5, #25
 8003be0:	d5fb      	bpl.n	8003bda <_printf_i+0x1ba>
 8003be2:	8019      	strh	r1, [r3, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	4616      	mov	r6, r2
 8003be8:	6123      	str	r3, [r4, #16]
 8003bea:	e7bc      	b.n	8003b66 <_printf_i+0x146>
 8003bec:	6833      	ldr	r3, [r6, #0]
 8003bee:	2100      	movs	r1, #0
 8003bf0:	1d1a      	adds	r2, r3, #4
 8003bf2:	6032      	str	r2, [r6, #0]
 8003bf4:	681e      	ldr	r6, [r3, #0]
 8003bf6:	6862      	ldr	r2, [r4, #4]
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	f000 f859 	bl	8003cb0 <memchr>
 8003bfe:	b108      	cbz	r0, 8003c04 <_printf_i+0x1e4>
 8003c00:	1b80      	subs	r0, r0, r6
 8003c02:	6060      	str	r0, [r4, #4]
 8003c04:	6863      	ldr	r3, [r4, #4]
 8003c06:	6123      	str	r3, [r4, #16]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c0e:	e7aa      	b.n	8003b66 <_printf_i+0x146>
 8003c10:	4632      	mov	r2, r6
 8003c12:	4649      	mov	r1, r9
 8003c14:	4640      	mov	r0, r8
 8003c16:	6923      	ldr	r3, [r4, #16]
 8003c18:	47d0      	blx	sl
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	d0ad      	beq.n	8003b7a <_printf_i+0x15a>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	079b      	lsls	r3, r3, #30
 8003c22:	d413      	bmi.n	8003c4c <_printf_i+0x22c>
 8003c24:	68e0      	ldr	r0, [r4, #12]
 8003c26:	9b03      	ldr	r3, [sp, #12]
 8003c28:	4298      	cmp	r0, r3
 8003c2a:	bfb8      	it	lt
 8003c2c:	4618      	movlt	r0, r3
 8003c2e:	e7a6      	b.n	8003b7e <_printf_i+0x15e>
 8003c30:	2301      	movs	r3, #1
 8003c32:	4632      	mov	r2, r6
 8003c34:	4649      	mov	r1, r9
 8003c36:	4640      	mov	r0, r8
 8003c38:	47d0      	blx	sl
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d09d      	beq.n	8003b7a <_printf_i+0x15a>
 8003c3e:	3501      	adds	r5, #1
 8003c40:	68e3      	ldr	r3, [r4, #12]
 8003c42:	9903      	ldr	r1, [sp, #12]
 8003c44:	1a5b      	subs	r3, r3, r1
 8003c46:	42ab      	cmp	r3, r5
 8003c48:	dcf2      	bgt.n	8003c30 <_printf_i+0x210>
 8003c4a:	e7eb      	b.n	8003c24 <_printf_i+0x204>
 8003c4c:	2500      	movs	r5, #0
 8003c4e:	f104 0619 	add.w	r6, r4, #25
 8003c52:	e7f5      	b.n	8003c40 <_printf_i+0x220>
 8003c54:	08005e63 	.word	0x08005e63
 8003c58:	08005e74 	.word	0x08005e74

08003c5c <memmove>:
 8003c5c:	4288      	cmp	r0, r1
 8003c5e:	b510      	push	{r4, lr}
 8003c60:	eb01 0402 	add.w	r4, r1, r2
 8003c64:	d902      	bls.n	8003c6c <memmove+0x10>
 8003c66:	4284      	cmp	r4, r0
 8003c68:	4623      	mov	r3, r4
 8003c6a:	d807      	bhi.n	8003c7c <memmove+0x20>
 8003c6c:	1e43      	subs	r3, r0, #1
 8003c6e:	42a1      	cmp	r1, r4
 8003c70:	d008      	beq.n	8003c84 <memmove+0x28>
 8003c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c7a:	e7f8      	b.n	8003c6e <memmove+0x12>
 8003c7c:	4601      	mov	r1, r0
 8003c7e:	4402      	add	r2, r0
 8003c80:	428a      	cmp	r2, r1
 8003c82:	d100      	bne.n	8003c86 <memmove+0x2a>
 8003c84:	bd10      	pop	{r4, pc}
 8003c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c8e:	e7f7      	b.n	8003c80 <memmove+0x24>

08003c90 <_sbrk_r>:
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	2300      	movs	r3, #0
 8003c94:	4d05      	ldr	r5, [pc, #20]	@ (8003cac <_sbrk_r+0x1c>)
 8003c96:	4604      	mov	r4, r0
 8003c98:	4608      	mov	r0, r1
 8003c9a:	602b      	str	r3, [r5, #0]
 8003c9c:	f7fd fba0 	bl	80013e0 <_sbrk>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d102      	bne.n	8003caa <_sbrk_r+0x1a>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	b103      	cbz	r3, 8003caa <_sbrk_r+0x1a>
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	bd38      	pop	{r3, r4, r5, pc}
 8003cac:	2000068c 	.word	0x2000068c

08003cb0 <memchr>:
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	b510      	push	{r4, lr}
 8003cb4:	b2c9      	uxtb	r1, r1
 8003cb6:	4402      	add	r2, r0
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	d101      	bne.n	8003cc2 <memchr+0x12>
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	e003      	b.n	8003cca <memchr+0x1a>
 8003cc2:	7804      	ldrb	r4, [r0, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	428c      	cmp	r4, r1
 8003cc8:	d1f6      	bne.n	8003cb8 <memchr+0x8>
 8003cca:	bd10      	pop	{r4, pc}

08003ccc <memcpy>:
 8003ccc:	440a      	add	r2, r1
 8003cce:	4291      	cmp	r1, r2
 8003cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cd4:	d100      	bne.n	8003cd8 <memcpy+0xc>
 8003cd6:	4770      	bx	lr
 8003cd8:	b510      	push	{r4, lr}
 8003cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cde:	4291      	cmp	r1, r2
 8003ce0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ce4:	d1f9      	bne.n	8003cda <memcpy+0xe>
 8003ce6:	bd10      	pop	{r4, pc}

08003ce8 <_realloc_r>:
 8003ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cec:	4607      	mov	r7, r0
 8003cee:	4614      	mov	r4, r2
 8003cf0:	460d      	mov	r5, r1
 8003cf2:	b921      	cbnz	r1, 8003cfe <_realloc_r+0x16>
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cfa:	f7ff bc3b 	b.w	8003574 <_malloc_r>
 8003cfe:	b92a      	cbnz	r2, 8003d0c <_realloc_r+0x24>
 8003d00:	f7ff fbce 	bl	80034a0 <_free_r>
 8003d04:	4625      	mov	r5, r4
 8003d06:	4628      	mov	r0, r5
 8003d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d0c:	f000 f81a 	bl	8003d44 <_malloc_usable_size_r>
 8003d10:	4284      	cmp	r4, r0
 8003d12:	4606      	mov	r6, r0
 8003d14:	d802      	bhi.n	8003d1c <_realloc_r+0x34>
 8003d16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d1a:	d8f4      	bhi.n	8003d06 <_realloc_r+0x1e>
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4638      	mov	r0, r7
 8003d20:	f7ff fc28 	bl	8003574 <_malloc_r>
 8003d24:	4680      	mov	r8, r0
 8003d26:	b908      	cbnz	r0, 8003d2c <_realloc_r+0x44>
 8003d28:	4645      	mov	r5, r8
 8003d2a:	e7ec      	b.n	8003d06 <_realloc_r+0x1e>
 8003d2c:	42b4      	cmp	r4, r6
 8003d2e:	4622      	mov	r2, r4
 8003d30:	4629      	mov	r1, r5
 8003d32:	bf28      	it	cs
 8003d34:	4632      	movcs	r2, r6
 8003d36:	f7ff ffc9 	bl	8003ccc <memcpy>
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	4638      	mov	r0, r7
 8003d3e:	f7ff fbaf 	bl	80034a0 <_free_r>
 8003d42:	e7f1      	b.n	8003d28 <_realloc_r+0x40>

08003d44 <_malloc_usable_size_r>:
 8003d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d48:	1f18      	subs	r0, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bfbc      	itt	lt
 8003d4e:	580b      	ldrlt	r3, [r1, r0]
 8003d50:	18c0      	addlt	r0, r0, r3
 8003d52:	4770      	bx	lr

08003d54 <_init>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	bf00      	nop
 8003d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5a:	bc08      	pop	{r3}
 8003d5c:	469e      	mov	lr, r3
 8003d5e:	4770      	bx	lr

08003d60 <_fini>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	bf00      	nop
 8003d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d66:	bc08      	pop	{r3}
 8003d68:	469e      	mov	lr, r3
 8003d6a:	4770      	bx	lr
